Token matching. As well as source symbols you can use:
\b   beginning of text
\e   end of text
\n   newline
\t   any other token
On the left of the table are openers, and along the top are all tokens. Each
row refers to the most recent opener, and each column refers to the next token
to be considered. A basic entry is:
+    new token is pushed on stack of openers   (both on)
=    opener is popped off stack                (neither on)
<    opener is popped and new token is pushed  (right on)
>    nothing happens                           (left on)
This can be decorated with a prefix or postfix (or both). A prefix specifies a
type to override the opener's type. A suffix specifies a type to override the
new token's type.
OR maybe just classify:
X=BAD ( ) [ ] { } //C\n /*C*/ {-{-C-}-} "Q" "Q\n 'Q' 'Q\n

         (   )   [   ]   {   }   //  /*  */  "   '   \n  \t  \e
  (      +   =   +  X<   +  X<   +   +   >X  +   +   >   >   X<
  [      +   >X  +   =   +  X<   +   +   >X  +   +   >   >   X<
  {      +   >X  +   >X  +   =   +   +   >X  +   +   >   >   X<
  //     >C  >C  >C  >C  >C  >C  >C  >C  >C  >C  >C  =   >C  X<
  /*     >C  >C  >C  >C  >C  >C  >C  >C  =   >C  >C  >C  >C  X<
  "      >Q  >Q  >Q  >Q  >Q  >Q  >Q  >Q  >Q  =   >Q X=   >Q  X<
  '      >Q  >Q  >Q  >Q  >Q  >Q  >Q  >Q  >Q  >Q  =  X=   >Q  X<
  \b     +   >X  +   >X  +   >X  +   +   >X  +   +   >   >    =

If this is the algorithm for a line, then // " ' are dealt with and we are left
with:

         (   )   [   ]   {   }   /*  */  \e
  (      +   =   +  X<   +  X<   +   >X  X<
  [      +   >X  +   =   +  X<   +   >X  X<
  {      +   >X  +   >X  +   =   +   >X  X<
  /*     >C  >C  >C  >C  >C  >C  >C  =   X<
  \b     +   >X  +   >X  +   >X  +   >X  =

Can we reverse this?

         )   ]   }   */  \e
  (      =  X<  X<  C<  X<
  )      +   +   +  C<   +
  [      >X  =  X<  C<  X<
  ]      +   +   +  C<   +
  {      >X  >X  =  C<  X<
  }      +   +   +  C<   +
  /*    X<  X<  X<   =  X<
  */     +   +   +  C<   +
  \b    X<  X<  X<

         (   )   [   ]   {   }   /*  */  \e
  (      +   =   +  X<   +  X<   +   >X  X<
  [      +   >X  +   =   +  X<   +   >X  X<
  {      +   >X  +   >X  +   =   +   >X  X<
  /*     >C  >C  >C  >C  >C  >C  >C  =   X<
  \b     +   >X  +   >X  +   >X  +   >X  =

How recognize closers? (They have >X in \b row, or list them.)
Maybe annotate left/top tokens by type.

How does /* ... */ work across the boundary?
Maybe match backward (but then what about // " ' that stop at the end of line?)
Maybe match forward through each line, then backward through the lines (but
then what about */ in the middle of a line? And can we auto-generate the
algorithm?)

PROBLEM: when matching after point, IF the top closer is */ THEN should have
started in that state, but how do you know? OR how do you reverse the algorithm
and yet handle // ... \n or "..."\n ?

Final part of algorithm. First deal with excess openers or closers by
mismatching them with \e or \b. Then run algorithm on what's left.

SEMICOLONS:
(/[/{                                       // Open bracket
struct/enum/union ID { ... };               // Declaration
= { ... };                                  // Initializer
= ( ... ) { ... };                          // Initializer with cast
}                                           // Other curly bracket
\t;                                         // any other token
