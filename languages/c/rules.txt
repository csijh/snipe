# C language scanner, according to the C11 standard
# See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf

# Potential keywords: go to key state to check if really identifiers
start  _Alignas _Atomic _Bool _Complex _Generic _Imaginary _Noreturn    key
start  _Static_assert _Thread_Local alignof auto bool break case char   key
start  const continue default do double else enum extern false float    key
start  for goto if inline int long register restrict return short       key
start  signed sizeof static struct switch true typedef union unsigned   key
start  void volatile while                                              key

# Operators and signs. An arrow may be followed by a field
start != ! % && &= & *= * ++ += + -- -= - /= /  start OPERATOR
start <<= << <= < == >= >>= >> > ^= ^ |= || | ~ start OPERATOR
start ## %:%: %= , ... = ; ?? ? start SIGN
start : start HANDLE
start -> field SIGN

# Brackets.
start ( start ROUND0
start ) start ROUND1
start [ <: start ANGLE0
start ] :> start ANGLE1
start { <% start WAVY0
start } %> start WAVY1

# Identifiers, numbers, preprocessor lines
start a..z A..Z _ \U \u id
start 0..9 num
start . dot
start # %: hash KEYWORD1

# Quotes, escape sequences, comments, white space, illegal characters
start ' start QUOTE
start " start DOUBLE
start \ escape
start // start COMMENT
start /* start COMMENT0
start */ start COMMENT1
start start BAD

# Potential keywords, if not followed by alphanumerics.
key a..z A..Z 0..9 _ \U \u id
key start KEY

# Identifiers
id a..z A..Z 0..9 _ \U \u id
id start ID

# A dot starts a number, or is a sign possibly followed by a property.
dot 0..9 num
dot field SIGN

# A field is an identifier following a dot or arrow
field a..z A..Z 0..9 _ \U \u field
field start PROPERTY

# Numbers with possible exponents.
num . 0..9 num
num e+ e- E+ E- num
num p+ p- P+ P- num
num start VALUE

# Escape sequences: single character, hex, octal
escape a..w y..z start ESCAPE
escape x escapex
escape 0..7 escape1
escape start BAD

# Octal escape sequences: up to three digits.
escape1 0..7 escape2
escape1 start ESCAPE
escape2 0..7 start ESCAPE
escape2 start ESCAPE

# Hex escape sequences: any number of digits
escapex 0..9 a..f A..F escapex
escapex start ESCAPE

# A hash is followed by a preprocessor keyword.
hash include inclusion KEY1
hash define elif else endif error if start KEY1
hash ifdef ifndef line pragma undef start KEY1
hash start KEY1

# After #include, aim to scan <filename> as a string.
# TODO doesn't this make <x> into a matchable quote?
inclusion < filename
inclusion start QUOTED
filename !..= ?..~ filename
filename > start QUOTED
filename start QUOTED
