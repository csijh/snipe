start __Alignas __Atomic __Bool __Complex __Generic __Imaginary key
start __Noreturn __Static__assert __Thread__Local alignof auto key
start bool break case char const continue default do double else key
start enum extern false float for goto if inline int long key
start register restrict return short signed sizeof static struct key
start switch true typedef union unsigned void volatile while key
start ( [ { OPEN:start
start ) ] } CLOSE:start
start ## %: %= %> , -> ... . :> : ; <% <: = ?? ? SIGN:start
start != ! % && &= & *= * ++ += + -- -= - /= / <<= << <= < == OP:start
start >= >>= >> > ^= ^ |= || | ~ OP:start
start a..z A..Z __ \U \u id
start /* */ COMMENT:start
start // NOTE:start
start . dot
start 0..9 num
start ' char
start " STRING:start
start \ escape
start # hash
start _ gap
start _..~ BAD:start
start BAD:start

key a..z A..Z 0..9 id
key __ \U \u id
key KEY:start

id a..z A..Z 0..9 id
id __ \U \u id
id ID:start

dot 0..9 num
dot SIGN:start

num . 0..9 num
num e+ e- E+ E- num
num p+ p- P+ P- num
num NUMBER:start

char ' CHAR:start
char \\ char
char \' char
char _..~ char
char BAD:start

escape _..~ ESCAPE:start

hash _ hash
hash include RESERVED:includeGap
hash define elif RESERVED:start
hash else endif RESERVED:start
hash error if RESERVED:start
hash ifdef ifndef RESERVED:start
hash line pragma RESERVED:start
hash undef RESERVED:start
hash RESERVED:start

includeGap _ includeGap
includeGap GAP:fileStart

fileStart < file
fileStart start

file > STRING:start
file _..~ file
file BAD:start

gap _ gap
gap GAP:start
