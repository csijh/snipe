// JavaScript language definition, based on the ES2023 standard

// At the start of a file only, recognise a hashbang comment. To distinguish
// between / as divison and / as start of regex, check for regex at the start
// of the file, after prefix or infix tokens. Otherwise, the start state
// accepts / as a division operator.

hashbang  #!  note NOTE
hashbang  \   regex

// Keywords, reserved words and restricted words.

start  arguments as async await break case catch class const continue  key
start  debugger default delete do else enum export extends eval false  key
start  finally for from function get if implements import in           key
start  instanceof interface of new null package private protected      key
start  public return set super switch target this throw true try       key
start  typeof var void while with yield                                key
key    a..z A..Z 0..9 $ _ \\u                                          id
key    \\u{                                                            id1
key    \                                                               start KEY

// Operators and signs. After OP/SIGN, check for regex.

start  ++ -- ~ !                                             start UNARY
start  < > <= >= == != === !== + - * % ** << >> >>> & | ^    regex OP
start  && || = += -= *= %= **= <<= >>= >>>= &= |= ^= => ??   regex OP
start  &&= ||= ??=                                           regex OP
start  / ?. ?                                                regex OP
start  ...                                                   start MARK
start  ; , :                                                 regex SIGN

// Brackets: } is postfix, so never has a semicolon added after it. When {} are
// used for structures, JavaScript's own semicolon insertion rules will add one.
// After an open bracket, check for regex.

start { regex BEGIN
start } start END
start [ regex LEFT
start ] start RIGHT
start ( regex LEFT
start ) start RIGHT

// Check for regex literal (with flags), otherwise jump to start.
// Deal with  /..\/../  and  /..[../..]../  and spaces.
regex   /        regex1
regex   \        start

// After /.. space
regex0  /        regex4
regex0  \\/      regex1
regex0  [        regex3
regex0  !..~     regex1
regex0  \s       regex0
regex0  \n       start

// After /..
regex1  /        regex4
regex1  \\/      regex1
regex1  [        regex3
regex1  !..~     regex1
regex1  \s       regex0 QUOTE
regex1  \n       start WRONG

// After /..[.. space
regex2  ]        regex1
regex2  !..~     regex3
regex2  \s       regex2
regex2  \n       start

// After /..[..
regex3  ]        regex1
regex3  !..~     regex3
regex3  \s       regex2 QUOTE
regex3  \n       start WRONG

// After /../
regex4  a..z A..Z 0..9 $ _ \\u  regex4
regex4  \                       start QUOTE

// Identifier

start  A..Z a..z $ _ \\u #     id
start  \\u{                    id1
id     a..z A..Z 0..9 $ _ \\u  id
id     \\u{                    id1
id     \                       start ID
id1    0..9 A..F a..f          id1
id1    }                       id
id1    \                       start WRONG

// A dot starts a number, or is an operator.

start   .      dot
dot     \0..9  float
dot     \      start OP

// One-line comment.

start    //     note NOTE
note     !..~   note1
note     \s     note
note     \n     start
note1    !..~   note1
note1    \s \n  note NOTE

// Multi-line comment.

start      /*         comment COMMENT
comment    !..~       comment1
comment    \s \n      comment
comment    */         start COMMENT
comment1   !..~       comment1
comment1   \s \n \*/  comment COMMENT

// Single quote string literal.

start     '      single1
single    !..~   single1
single    \\     single2
single    \s     single
single    '      start QUOTE
single    \n     start

// After '
single1   !..~   single1
single1   \\     single2
single1   \s     single QUOTE
single1   '      start QUOTE
single1   \n     start WRONG

// After '..\ accept ' and newline
single2   !..~   single1
single2   \s \n  single3 QUOTE

// After '..\ with a newline next
single3   \n \   single

// Double quote string literal.

start     "      double1
double    !..~   double1
double    \\     double2
double    \s     double
double    "      start QUOTE
double    \n     start

// After "
double1   !..~   double1
double1   \\     double2
double1   \s     double QUOTE
double1   "      start QUOTE
double1   \n     start WRONG

// After "..\ accept " and newline
double2   !..~   double1
double2   \s \n  double3 QUOTE
double3   \n \   double

// Number.
start     0b 0B    binary
start     0o 0O    octal
start     0x 0X    hex
start     0..9     decimal

binary    0..1 _   binary
binary    n \      start VALUE      

octal     0..7 _   octal
octal     n \      start VALUE      

hex       0..9 _   hex
hex       a..f     hex
hex       A..F     hex
hex       n \      start VALUE      

decimal   0..9 _        decimal
decimal   .             float
decimal   e+ e- E+ E-   exponent
decimal   n \           start VALUE
float     0..9          float
float     e+ e- E+ E-   exponent
float     \             start VALUE
exponent  0..9          exponent
exponent  \             start VALUE

// Template string literal.

start      `         template1
template   ${        sub DOC
template   !..~ \\`  template1
template   `         start DOC
template   \s \n     template
template1  ${        sub DOC
template1  !..~ \\`  template1
template1  `         start DOC
template1  \s \n     template DOC

// Illegal characters and white space.
start     @ \\    start WRONG
start     \s \n   start

// -----------------------------------------------------------------------------
// Sublanguage of simple expressions supported in templates. No curly brackets,
// no templates, no comments, few keywords.

// Sublanguage keywords.

sub     this yield await null true false    subkey
subkey  a..z A..Z 0..9 $ _ \\u              subid
subkey  \\u{                                subid1
subkey  \                                   sub KEY

// Sublanguage operators and signs.

sub  ++ -- ~ !                          sub UNARY
sub  < > <= >= == != === !== + -        subreg OP
sub  * % ** << >> >>> & | ^             subreg OP
sub  && || = += -= *= %= **= <<= >>=    subreg OP
sub  >>>= &= |= ^= => ?? /              subreg OP
sub  &&= ||= ??=                        subreg OP
sub  ?. ?                               subreg OP
sub  ...                                sub MARK
sub  ; , :                              subreg SIGN

// Sublanguage brackets. No open curly. Close curly terminates the substitution.

sub  [ (                                subreg LEFT
sub  ] )                                sub RIGHT
sub  }                                  template1

// Sublanguage identifier

sub     a..z A..Z 0..9 $ _ \\u #  subid
sub     \\u{                      subid1
subid   a..z A..Z 0..9 $ _ \\u    subid
subid   \                         sub ID
subid1  0..9 A..F a..f            subid1
subid1  }                         subid
subid1  \                         sub WRONG

// Sublanguage dot

sub     .      subdot
subdot  \0..9  subfloat
subdot  \      sub OP

// Sublanguage single quote string literal.

sub        '      subsingle1
subsingle  !..~   subsingle1
subsingle  \\     subsingle2
subsingle  \s     subsingle
subsingle  '      sub QUOTE
subsingle  \n     sub

subsingle1   !..~   subsingle1
subsingle1   \\     subsingle2
subsingle1   \s     subsingle QUOTE
subsingle1   '      sub QUOTE
subsingle1   \n     sub WRONG

subsingle2   !..~   subsingle1
subsingle2   \s \n  subsingle3 QUOTE
subsingle3   \n \   subsingle

// Sublanguage double quote string literal.

sub        "      subdouble1
subdouble  !..~   subdouble1
subdouble  \\     subdouble2
subdouble  \s     subdouble
subdouble  "      sub QUOTE
subdouble  \n     sub

subdouble1   !..~   subdouble1
subdouble1   \\     subdouble2
subdouble1   \s     subdouble QUOTE
subdouble1   "      sub QUOTE
subdouble1   \n     sub WRONG

subdouble2   !..~   subdouble1
subdouble2   \s \n  subdouble3 QUOTE
subdouble3   \n \   subdouble

// Sublanguage number.

sub     0b 0B    subbinary
sub     0o 0O    suboctal
sub     0x 0X    subhex
sub     0..9     subdecimal

subbinary    0..1 _   subbinary
subbinary    n \      sub VALUE

suboctal     0..7 _   suboctal
suboctal     n \      sub VALUE

subhex       0..9 _   subhex
subhex       a..f     subhex
subhex       A..F     subhex
subhex       n \      sub VALUE      

subdecimal   0..9 _        subdecimal
subdecimal   .             subfloat
subdecimal   e+ e- E+ E-   subexponent
subdecimal   n \           sub VALUE
subfloat     0..9          subfloat
subfloat     e+ e- E+ E-   subexponent
subfloat     \             sub VALUE
subexponent  0..9          subexponent
subexponent  \             sub VALUE

// Sublanguage regex
subreg   /        subreg1
subreg   \        sub

subreg0  /        subreg4
subreg0  \\/      subreg1
subreg0  [        subreg3
subreg0  !..~     subreg1
subreg0  \s       subreg0
subreg0  \n       sub

subreg1  /        subreg4
subreg1  \\/      subreg1
subreg1  [        subreg3
subreg1  !..~     subreg1
subreg1  \s       subreg0 QUOTE
subreg1  \n       sub WRONG

subreg2  ]        subreg1
subreg2  !..~     subreg3
subreg2  \s       subreg2
subreg2  \n       sub

subreg3  ]        subreg1
subreg3  !..~     subreg3
subreg3  \s       subreg2 QUOTE
subreg3  \n       sub WRONG

subreg4  a..z A..Z 0..9 $ _ \\u  subreg4
subreg4  \                       sub QUOTE

// Sublanguage illegal characters and white space.

sub     @ \\ ` {  sub WRONG
sub     \s \n     sub

// ---------- Tests ------------------------------------------------------------
// In the expected output for a test, the start of each token is marked by the
// first letter of its type. Remaining characters are marked with space, a
// space is marked with an underline, and a newline is marked with a dot.

// A few tokens
> (count+1)
< LI    OVR.

// An id can start with a keyword
> do dot for form
< K _I  _K  _I   .

// Operators and signs of different fixities
> ++!<<=...=>
< U UO  M  O .

// Curly brackets (always treated as block brackets)
> s={}; do{}
< IOBES_K BE.

// Dot as sign or as part of number
> s.x 1.2 .2
< IOI_V  _V .

// Single quotes, including unclosed at end of line
> 'x' '\'' 'x
< Q  _Q   _W .

// Single quotes, with joiner
> '\
< Q .
> x'
< Q .

// Double quotes, including unclosed
> "hello world" "a\"b" "unclosed
< Q     _Q     _Q     _W        .

// Double quotes, with joiner
> "hello \
< Q     _Q.
> world"
< Q     .

// One line comment
> n = 0; // note
< I_O_VS_N _N   .

// Multi-line comment
> n = 0; /* line one
< I_O_VS_C _C   _C  .
> line two */ n = 1;
< C   _C  _C _I_O_VS.

// Numbers TODO
> 42 1.2e+3 4.5E-6 0X7f 0O37 0B10 0b0 0o0 0xa 
< V _V     _V     _V   _V   _V   _V  _V  _V  .

// Big numbers
> 42n 0X7Fn 0O37n 0B10n
< V  _V    _V    _V    .

// Illegal characters
> @ \
< W_W.

// Leading spaces
>    x
< ___I.

// One line template, and two-line template
> n=1; `abc` n=2; `abc
< IOVS_D    _IOVS_D   .
> def` n=3;
< D   _IOVS.

// Template with joiner.
> n=1; `abc\
< IOVS_D    .
> def` n=2;
< D   _IOVS.

// Template with one sub, and with two subs.
> n=1; `abc${x}def` n=2; `abc${x}def${y}ghi`
< IOVS_D     ID    _IOVS_D     ID     ID    .

