// C language definition, based on the C11 standard.

// It is assumed that there are no digraphs or trigraphs (or that they are
// handled by some form of preprocessing). Line joiners (i.e. backslash before
// newline) are assumed to occur only between tokens (e.g. in #define) or
// in strings (even though concatenation of adjacent strings can be used).

// -----------------------------------------------------------------------------

// Keywords which are types or related to types. Include bool from <stdbool.h>.
// The type state checks for added characters which make the token an id.

start   _Atomic _Bool _Complex _Generic _Imaginary      type
start   bool char double float int long                 type
start   short signed unsigned void                      type
type    a..z A..Z 0..9 _ \\U \\u                        id
type    |                                               start Decl

// Other keywords. Include false, true from <stdbool.h>. The key states check
// for added characters. The enum and struct keywords cause bracket checking.

start   _Alignas _Noreturn _Static_assert _Thread_Local         key
start   alignof auto break case const continue default do else  key
start   extern false for goto if inline register restrict       key
start   return sizeof static switch true typedef union          key
start   volatile while                                          key
start   enum struct                                             key1
key     a..z A..Z 0..9 _ \\U \\u                                id
key     |                                                       start Key
key1    a..z A..Z 0..9 _ \\U \\u                                id
key1    |                                                       decl Key

// Identifiers

start   a..z A..Z _ \\U \\u        id
id      a..z A..Z 0..9 _ \\U \\u   id
id      |                          start Id

// Operators and signs. A + or - is marked infix, even though it can be prefix,
// because it is far more likely to indicate a continuation line than to be the
// start of a statement.

start   ++ -- ! ~                                       start Unary
start   != %= % && &= & *= * += + -= - /= / ?           start Op
start   <<= << <= < == >= >>= >> > ^= ^ \|= \|\| \|     start Op
start   ## , ; : -> ...                                 start Mark
start   =                                               init  Op

// Brackets. By default { and } are block brackets. To help with semicolon
// insertion, the opener { is marked as a group bracket instead, by the
// rules below. The closer } is marked as a group bracket to match.

start  {   start BlockB
start  }   start BlockE
start  }   start GroupE
start  [   start SquareB
start  ]   start SquareE
start  (   start RoundB
start  )   start RoundE

// Check for declaration brackets  enum {  or  struct {
decl   {                           start GroupB
decl   a..z A..Z _ \\U \\u         decl1
decl   \s \n                       decl  Gap
decl   |                           start

// Check for  enum ID  or  struct ID
decl1   a..z A..Z 0..9 _ \\U \\u   decl1
decl1   |                          decl2 Id

// Check for  enum ID {  or  struct ID {
decl2   {                          start GroupB
decl2   \s \n                      decl2 Gap
decl2   |                          start

// Check for initialiser brackets  = {
init    {                          start GroupB
init    (                          init1 Round2B
init    \s \n                      init  Gap
init    |                          start

// Check for   = (   or   = (struct
init1   struct                     init1 Key
init1   a..z A..Z _ \\U \\u        init2
init1   \s \n                      init1 Gap
init1   |                          start

// Check for   = (ID   or   = (struct ID
init2   a..z A..Z 0..9 _ \\U \\u   init2
init2   |                          init3 Id

// Check for   = (ID)   or   = (struct ID)
init3   )                          init4 Round2E
init3   \s \n                      init3 Gap
init3   |                          start

// Check for   = (ID) {   or   = (struct ID) {
init4   {                          start GroupB
init4   |                          start

// A dot starts a number, or is an operator.

start   .      dot
dot     |0..9  decimal
dot     |      start Op

// Character literals.

start   '      char  QuoteB
char    !..~   char
char    \\'    char
char    |\s    char  Quote
char    \s     char  Gap
char    |'     char  Quote
char    '      start QuoteE
char    |\n    char  Quote
char    \n     start Quote2E

// String literals. Allow joiners

start   "           string  QuoteB
string  !..~ \\"    string
string  |\s |\n |"  string  Quote
string  |\\\n       string2 Quote
string  \s          string  Gap
string  "           start   QuoteE
string  \n          start   Quote2E

string2 \\          string2 Sign
string2 \n          string  Gap
string2 |           string  Error

// One-line comment.

start  //       note  CommentB
note   !..~     note
note   |\s |\n  note  Comment
note   \s       note  Gap
note   \n       start CommentE

// Multi-line comment.

start     /*               comment CommentB
comment   !..~             comment
comment   |\s |\n |/* |*/  comment Comment
comment   \s \n            comment Gap
comment   /*               comment Error
comment   */               start   CommentE

// Numbers. There is no attempt to detect malformed numbers.
start    0..9           decimal
start    0x 0X          hex
decimal  0..9 .         decimal
decimal  e+ e- E+ E-    decimal
decimal  u U l L ll LL  decimal
decimal  |              start Value
hex      0..9 .         hex
hex      a..f A..F      hex
hex      p+ p- P+ P-    hex
hex      u U l L ll LL  hex
hex      |              start Value

// Reserved words. Preprocessor tokens are handled as normal tokens, except for
// <filename> after #include.

start     #                                 hash Alt
hash      \s                                hash Gap
hash      include                           include Alt
hash      define elif else endif error if   start Alt
hash      ifdef ifndef line pragma undef    start Alt
hash      |                                 start

include   <                                 filename QuoteB
include   \s                                include Gap
include   |                                 start

filename  !..~                              filename
filename  |>                                filename Quote
filename  >                                 start Quote
filename  |\s                               filename Quote
filename  \s                                filename Gap
filename  |\n                               filename Quote
filename  \n                                start Quote2E

// Backslash newline, e.g. in #define. Give the backslash type Sign to avoid
// an unwanted newline. Handle Illegal characters and white space.

start |\\\n join
join  \\    join  Sign
join  \n    start Gap
join  |     start Error

start     \\ $ @ `   start Error
start     \s \n      start Gap

// ---------- Tests ------------------------------------------------------------
// In the expected output for a test, the start of each token is marked by the
// first letter of its type. Remaining characters are marked with space, a
// space is marked with an underline, and a newline is marked with a dot.

// A few one-character tokens
> x+1;
< IOVM

// A longer token, and matched round brackets
> (count+1)
< RI----OVR

// Matched square brackets, and mismatched brackets
> [x],(y]
< SISMrIs

// An id can start with a declarator or keyword
> char chart for form
< D--- I---- K-- I---

// Operators of different fixities and marks
> ++!<<=...->
< U-UO--M--M-

// Curly brackets recognised as group or block brackets
> s={}; do{}
< IOGGM K-BB

// More curly group brackets
> enum{}  struct{}  enum E{}  struct S{}
< K---GG  K-----GG  K--- IGG  K----- IGG

// More curly group brackets
> ={}  =(t){}  =(struct t){}
< OGG  ORIRGG  ORK----- IRGG

// Dot as sign or as part of number
> s.x 1.2 .2
< IOI V-- V-

// Character literals, including unclosed at end of line
> 'x' '\'' 'x
< QQQ QQ-Q qQq

// String literals, including unclosed
> "hello world" "a\"b" "unclosed
< QQ---- Q----Q QQ---Q qQ-------q

// String literal with joiner
> "hello \
< QQ---- S
> world"
< Q----Q

// One line comment
> n = 0; // note
< I O VM C- C---C

// Numbers
> 42 1.2e+3 4.5E-6 0x7f 0x7F 0x7c.def 0xa.bcp+d 0xaU 0xaL
< V- V----- V----- V--- V--- V------- V-------- V--- V---

// Reserved words (there can be spaces between # and a reserved word)
> #if # else #define #include
< AA- A A--- AA----- AA------

// Include filename
> #include <f> #include <one two.ext>
< AA------ QQQ AA------ QQ-- Q------Q

// Joiner
> #define f(x) \
< AA----- IRIR S

// Illegal characters
> $ @ `
< E E E

// Leading spaces
>    x
<    I

// Mismatched brackets on two lines.
> one (
< I-- r
> two ]
< I-- s

// Multi-line comment
> n = 0; /* line one
< I O VM C- C--- C--
> line two */ n = 1;
< C--- C-- C- I O VM

// A few general tests

> if (b) n = 1;
< K- RIR I O VM

> if (b) { n = 1; }
< K- RIR B I O VM B

> int n;
< D-- IM

> string s;
< I----- IM

> enum suit { Club, Diamond, Heart, Spade };
< K--- I--- G I---M I------M I----M I---- GM

> int ns[] = { 1, 2, 34};
< D-- I-SS O G VM VM V-GM

> char *s = "a\nb\0c\04d";
< D--- OI O QQ----------QM

> char *s = "\037e\038f\xffg";
< D--- OI O QQ--------------QM

> obj.x, obj->x, f(x)
< I--OIM I--M-IM IRIR

> n = f   (x);
< I O I   RIRM

> s = "*/"//"; /* abc "*/"//";
< I O QQ-QC-C- C- C-- C-------C
