// C language definition, based on the C11 standard
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf
// The source text is assumed to be normalised, with no control characters
// other than \n and no digraphs or trigraphs.

// Keywords which are types or related to types. A few ids such as bool,
// false, true from <stdbool.h> are treated as keywords. The type state checks
// for additional characters which mean the token is an id.

start   _Atomic _Bool _Complex _Generic _Imaginary      type
start   bool char double float int long                 type
start   short signed unsigned void                      type
type    a..z A..Z 0..9 _ \\U \\u                        id
type    \                                               start TYPE

// Other keywords. The key state checks for additional characters.

start   _Alignas _Noreturn _Static_assert _Thread_Local         key
start   alignof auto break case const continue default do else  key
start   enum extern false for goto if inline register restrict  key
start   return sizeof static struct switch true typedef union   key
start   volatile while                                          key
key     a..z A..Z 0..9 _ \\U \\u                                id
key     \                                                       start KEY

// Operators and signs.

start   != ! % && &= & *= * ++ += + -- -= - /= / ?  start OP
start   <<= << <= < == >= >>= >> > ^= ^ |= || | ~   start OP
start   ## %= , ... ; : -> =                        start SIGN

// Identifiers

start   a..z A..Z _ \\U \\u        id
id      a..z A..Z 0..9 _ \\U \\u   id
id      \                          start ID

// Brackets. By default { and } are block brackets, level 4. (They are later
// adjusted to structure brackets, level 3, if they are declaration or
// initialiser brackets, to help with semicolon insertion.)
// TODO for semicolon insertion
// enum {            ->   OPEN3 (then matching } goes to CLOSE3)
// enum ID {
// struct {
// struct ID {
// = {
// = ( ID ) {
// = ( struct ID ) {
// $infix  OPENb CLOSEb
// $prefix CLOSEi

start  (   start OPEN1
start  )   start CLOSE1
start  [   start OPEN2
start  ]   start CLOSE2
start  {   start OPEN4
start  }   start CLOSE4

// A dot starts a number, or is a sign.
// TODO  .id or ->id becomes PROPERTY

start   .           dot
dot     \0..9       float
dot     \           start SIGN

// Character and string literals.

start   '      char
char    !..~   char
char    \\'    char
char    \s     char QUOTED
char    ' \n   start QUOTED

start   "      string
string  !..~   string
string  \\"    string
string  \s     string QUOTED
string  " \n   start QUOTED

// One-line comment. Mark /* or */ as warning.

start    //     note
note     !..~   note
note     \s     note COMMENT
note     \n     start COMMENT

// Multi-line comment.

start     /*     comment
comment   !..~   comment
comment   \s \n  comment COMMENT
comment   */     start COMMENT

// Numbers.
start    0..9           decimal
start    0x 0X          hex
decimal  0..9 .         decimal
decimal  e+ e- E+ E-    decimal
decimal  u U l L ll LL  decimal
decimal  \              start VALUE
hex      0..9 .         hex
hex      a..f A..F      hex
hex      p+ p- P+ P-    hex
hex      u U l L ll LL  hex
hex      \              start VALUE

// Backslash newline is only supported between tokens.

start \\ start JOIN

// Reserved words, and include files.

start     #                                 hash RESERVED
hash      \s                                hash
hash      include                           include RESERVED
hash      define elif else endif error if   start RESERVED
hash      ifdef ifndef line pragma undef    start RESERVED
hash      \                                 start
include   <                                 filename
include   \                                 start
filename  !..~                              filename
filename  \s                                filename QUOTED
filename  > \n                              start QUOTED

// TODO: check tags are COMMENT, FUNCTION, ID, JOIN, KEY, OP, PROPERTY, QUOTE,
// RESERVED, SIGN, TYPE, VALUE, BEGINi, ENDi

