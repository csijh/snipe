// The Snipe editor is free and open source, see licence.txt.
#include <stdbool.h>

// Constants representing keyboard, mouse, window and timer events. An event is
// a 10-bit integer consisting of an 8-bit code and two flags. The first 128
// codes are reserved for text keys corresponding to printable plain text
// characters, and the remainder are named non-text keys etc. The flags are
// indicated by S_ and C_ prefixes to represent shift or control/cmd, with SC_
// representing both. Use of Alt is not detected, because Alt events are likely
// to be bound to system-wide operations. Text keys can only be combined with C_
// because otherwise they are handled via TEXT, or keyboard layout information
// is not available, e.g. C_+ on most keyboards generates C_= instead. The keys
// are limited to those handled by GLFW, e.g. C_A, C_B, ..., C_+, C_-, C_1, C_2,
// ... CLICK and DRAG are mouse button down and up events. They are accompanied
// by pixel coordinates, later converted into document row/column coordinates by
// the display module. Every CLICK is followed by a DRAG, whether the mouse has
// been moved or not. The LINE_UP and LINE_DOWN events are generated by a mouse
// scroll wheel, or equivalent touchpad gesture. A TEXT event is accompanied by
// a character, possibly generated by a platform's Unicode input method. The
// codes after TEXT are window or timer events. Events from TEXT onwards are not
// combined with flags.
enum event {
    WORLD_1 = 128, WORLD_2, ESCAPE, ENTER, TAB, BACKSPACE, INSERT, DELETE, RIGHT,
    LEFT, DOWN, UP, PAGE_UP, PAGE_DOWN, HOME, END, F1, F2, F3, F4, F5, F6, F7,
    F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
    F23, F24, F25, KP_0, KP_1, KP_2, KP_3, KP_4, KP_5, KP_6, KP_7, KP_8, KP_9,
    KP_DECIMAL, KP_DIVIDE, KP_MULTIPLY, KP_SUBTRACT, KP_ADD, KP_ENTER, KP_EQUAL,
    MENU, CLICK, DRAG, LINE_UP, LINE_DOWN, TEXT, REDRAW, TICK, LOAD, BLINK,
    SAVE, QUIT,
    S_ = 0x100, C_ = 0x200, SC_ = S_ + C_, COUNT_EVENTS = 0x400,
};
typedef int event;

// Add an S_ or C_ or SC_ flag to an event.
event addEventFlag(event flag, event e);

// Check for an S_ or C_ or SC_ flag on an event.
bool hasEventFlag(event flag, event e);

// Remove any S_ or C_ or SC_ flags from an event.
event clearEventFlags(event e);

// Get the name of an event constant as a string (including combinations).
const char *findEventName(event e);

// Find an event from its name (including S_ or C_ or SC_ prefix).
event findEvent(char *name);

// Print out an event, e.g. for testing.
void printEvent(event e, int r, int c, char const *t);
