Scan
----
POSSIBLE: pre-compute the tables from the file we have now, making a dynamically
loadable binary data file.

CONTEXT-FREE: Don't create long tokens. For example a line '// One two' becomes
Note '//', Id 'One', Id 'two'. A multi-line comment becomes Comment '/*' Id
'One', and so on. A string '"*/"' becomes String '"', Comment '*/', String '"'.
There are separate token types for one-line constructs (Note, String) and
multi-line constructs (Comment, Para). Multi-line constructs become part of the
bracket matching phase. First, multi-line comment openers and closers are
matched. That's used to mark each line as starting or ending in an unclosed
multi-line comment. And that can be used to interpret tokens 'within' a comment
as comment-coloured, or within a string as string-coloured, as each line is sent
to be displayed. Need to make sure that monstrosities such as this cause no
problems:

/* x
// */ y /*
" */ // "
...{ */ }...    What does this do to openers and closers? Treat as 2 lines.

PROPOSE
a) Store line-boundary scan state in lines
b) Simplify comments by basing "word-based" ops on tokens OR spaces
c) Have a separate token store:
c1) index into token store is kept in lines
c2) two bytes per token: type and length
c3) POINT, SELECT, BAD 'flags' are inserted type values (with length 0?)

(c) having a better way of mixing token
types with flags, e.g. (c1) using a short for each text byte or (c2) using a
length encoding (three bytes per token maybe: type, flags, length) with a
separate index in the lines buffer into a separate tokens buffer.
Probably (a), (b), (c2)

If we have two scans per line, one assuming within multiline comment at start,
then maybe all changes can be kept local.

Current flags with a style are START (can replace with a single CONTINUE style
value), POINT, SELECT (can be handled e.g. by inserting single style values as
extras). We want to add BAD as a flag (insertion is more difficult because we
need permanent storage).

Ops
---
An op (edit or fix) is offered to:
text, lines, cursors, history/undo, style/highlights (after), brackets
An op is offered to these, to generate fixes:
trail, indent, semis

Trail
-----
User ins or del. Need (one) character beyond s to check.
Check if any characters are now spaces at end of line.
Check if newline at end of text.
Check if causes blank lines at end of text.
Where put the fix ops?

Refactor
--------
text (just gap-buffer, maybe with newline conventions).
history (edits passed on)
lines
cursors (does own repairs)
style (points to lines, text, scanner, auto-full-repair on edit)
brackets (needs style and lines of text)

Lines
-----
scan-state and semicolon-flags are fixed amounts.
so is indent-amount, but not indent-brackets.

Style changes.
--------------
NEED Open, Close, Bad. Bad needs to be an O/C flag.
Remove START in favour of MORE.
Add BAD as a genuine flag?
Do POINT/SELECT some other way, or as now.
Use names to indicate simulated defaults:
HOW tell the indenter to switch off inside comments?
MAYBE it is enough for the indenter to look for a first COMMENT token.
(Note Open_COMMENT, OPEN_NOTE should be indented correctly.)

SIGN
OPEN_SIGN  (_1, _2, ... ?)
CLOSE_SIGN
LABEL_SIGN
OP_SIGN
OPEN_COMMENT ?
CLOSE_COMMENT
KEY
OPEN_KEY
CLOSE_KEY  (how pair up?) (maybe OPEN_KEY2...)
TYPE_KEY
PROPERTY_KEY
NAME_WORD
ID_WORD
VARIABLE_WORD
FIELD_WORD
FUNCTION_WORD
NOTE_COMMENT

Could just have "default = previous", but can't skip.

Distinct:
Gap, Word, Key, Sign, Literal, Comment
Flags:
Alt1, Alt2, Alt3, Alt4, Alt5, Open, Close, Bad
