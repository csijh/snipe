<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<!-- TODO C++, Java, Python, Haskell, HTML -->

<p><mark>Snipe</mark > has a scanner, which is implemented as a string-matching
state machine, with stack-based bracket matching. It divides a source text into
tokens, and gives each token a type. It:</p>

<ul>
<li>may be approximate compared to a compiler</li>
<li>partitions the whole text into tokens, whether valid or not</li>
<li>supports dynamic loading of language definitions</li>
<li>supports incremental rescanning</li>
<li>includes bracket matching</li>
<li>aids indenting, semicolon insertion, and comment reformatting</li>
</ul>

<p>Languages for programming editors are often expressed using regular
expressions. Languages for Snipe are instead expressed as state machine tables.
These are easier to read and maintain, and only a little less compact. In
addition, stack-based bracket matching is supported, which regular expressions
can't handle.</p>

<p>For example, the C language is described by the <code>c.txt</code> file in
the directory <code>snipe/languages</code>. The commands <code>make
compile</code> and <code>./compile c.txt</code> can be used to compile the
file. The compiler analyses the language definition to ensure that the scanner
can handle any source text, and that it can't get stuck in an infinite loop. It
then carries out tests which are included in the <code>c.txt</code> file and,
if they pass, produces a compact table in file <code>c.bin</code> for use by
Snipe's scanner.</p>

<h2>Rules</h2>

<p>A language description contains simple text (<u title="aka ASCII (obsolete
and non-international)">basic Latin</u> characters <code>' '</code> to
<code>'~'</code> plus <code>'\n'</code>). The rules in the file specify how
simple source text is divided into tokens. The scanner which uses the
description treats every Unicode character beyond basic Latin in the same
way as letters. That is sufficient to handle the common uses of Unicode in
identifiers, string literals and comments.</p>

<p>In a language description file, a line which is blank or begins with a
non-letter such as <code>#</code> or <code>/</code> is a comment line which is
ignored, or a line used for testing. Otherwise, a line represents a
string-matching rule.</p>

<p>A rule has a base state name, a list of patterns to match, and a target state
name, all separated by spaces. A state name is a lower case word, possibly
including digits. A pattern is any sequence of non-space characters. When the
scanner is in the base state of a rule and one of the patterns appears next in
the input, the scanner moves past the matched characters to include them in the
token currently being scanned, and goes into the target state. For
example:</p>

<pre>start " string
</pre>

<p>With this rule, if the scanner is in the <code>start</code> state and a
double quote character appears next in the input, the scanner moves past the
character and goes into the <code>string</code> state.</p>

<p>A rule may have a token type after the target state. A type is a constant
beginning with an upper case letter, and must be one of the ones listed later.
If a rule has a type, the current token is ended, and given that type. For
example:</p>

<pre>start == != start Op
</pre>

<p>With this rule, in the <code>start</code> state, if either of the equality
operators <code>==</code> or <code>!=</code> appears next in the input, then
the scanner moves past the operator, makes it a token with type
<code>Op</code>, and goes to the <code>start</code> state.</p>

<p>A pattern can consist of two dots with a character on either side:</p>

<pre>start 0..9 number
</pre>

<p>The pattern represents a range of one-character patterns, so the rule is
equivalent to:</p>

<pre>start 0 1 2 3 4 5 6 7 8 9 number
</pre>

<p>If the scanner is in the <code>start</code> state, and a digit appears next
in the input, the scanner matches the digit and goes into the
<code>number</code> state.</p>

<p>The pattern <code>!..~</code> can be used to match any character other than
space or newline.</p>

<p>A limited form of lookahead is provided. A pattern which starts with a
single backslash <code>\</code> is a lookahead pattern. It indicates a string
to be matched without being included in the current token. For example:</p>

<pre>id \( start Function
</pre>

<p>In the <code>id</code> state, which presumably recognizes identifier tokens,
if the next character in the source text is an open round bracket, the current
token is given the type <code>Function</code> instead of <code>Id</code>. That
allows a function name to be highlighted differently when it appears as
<code>f()</code> say. (It is not possible, though, to look ahead past a
space to recognise <code>f ()</code> in the same way.) A lookahead pattern can
also be a range:</p>

<pre>dot \0..9 float
</pre>

<p>In the <code>dot</code> state, presumably just after recognizing a dot
character, if a digit appears next in the source text, the scanner goes to the
<code>float</code> state without moving past the digit.</p>

<p>A lookahead pattern <code>\s</code> matches a space and <code>\n</code>
matches a newline. For example:</p>

<pre>id \s \n start Id
</pre>

<p>While scanning an identifier, if a space or newline is encountered next in
the input, the identifier is given type <code>Id</code> and the scanner goes to
the <code>start</code> state.</p>

<p>Spaces and newlines cannot be included in tokens, but are handled
automatically. Matching a <code>\s</code> or <code>\n</code> pattern has the
side effect of marking the space or newline as a separator and moving past
it.</p>

<p>If a lookahead pattern matches when the current token is empty, and the rule
has a type, the type is ignored. For example:</p>

<pre>start \s \n start Sign
</pre>

<p>A rule containing <code>\s</code> or <code>\n</code> should normally have a
type, to terminate any current token before a separator. However, if a rule like
<code>start</code> can only ever occur at the start of a token, no type is
needed, because it would always be ignored. For example, the above
<code>Sign</code> type can be omitted:</p>

<pre>start \s \n start
</pre>

<p>A pattern beginning with two backslashes such as <code>\\u</code> is a
non-lookahead pattern matching a string such as <code>\u</code> starting with a
single backslash. A pattern beginning with three backslashes such as
<code>\\\u</code> is a lookahead for a string such as <code>\u</code> starting
with a single backslash. A backslash anywhere else in a pattern stands for
itself. A pattern <code>\</code> consisting of just a backslash is treated as
an abbreviation for a range, effectively equivalent to
<code>\n \s \!..~</code>, matching any character as a lookahead.</p>

<p>Brackets are automatically matched. Bracket tokens have a suffix
<code>B</code> (for begin) if they are opening brackets or <code>E</code>
(for end) if they are closing brackets. For example:</p>

<pre>start ( start RoundB
</pre>

<p>When this rule is obeyed, as well as giving the bracket the type
<code>RoundB</code>, the bracket is pushed on the stack of unmatched opening
brackets (i.e. the position and type of the token is remembered). A closing
bracket causes an item to be popped off the stack. For example:</p>

<pre>start ) start RoundE
</pre>

<p>For this rule to be obeyed, as well as the closing bracket being next in the
input, the top item on the stack must be a <code>RoundB</code> bracket. If so,
the stack is popped, the closing bracket is given the type <code>RoundE</code>,
and the two brackets are marked as matching. The default, if there is no other
rule that applies, is that the opening and closing brackets are marked as
mismatching. A closing bracket is also marked as a mismatch if the stack is
empty.</p>

<p>Delimiters of one-line comments or quotes are given types with suffix
<code>D</code>:</p>

<pre>start " string QuoteD
</pre>

<p>The tokens between the <code>QuoteD</code> delimiters are given the type
<code>Quote</code>. If there is no closing delimiter before the end of the
line, the bracket matcher treats the preceding <code>QuoteD</code> as
unmatched. If there is a continuation convention, such as a backslash at the
end of the line, to indicate that the quote is continued on the next line, the
backslash can be given type <code>Join</code>.</p>

<p>For one-line comments, say <code>//</code> to the end of the line, the
<code>//</code> is given type <code>NoteD</code> and the remaining tokens are
given the type <code>Note</code>. At the end of the line, the bracket matcher
treats the <code>NoteD</code> token as matched.</p>

<p>Delimiters of multi-line quotes are handled like brackets, using
<code>LongB</code> for the opening quote, <code>LongE</code> for the closing
quote, and <code>Long</code> for the tokens in between. Delimiters of
multi-line comments are also treated as brackets, but with normal types for the
tokens in between. For example:</p>

<pre>start /* start CommentB
</pre>

<p>After giving the opening delimiter the type <code>CommentB</code> and pushing
it on the stack, the scanner returns to the <code>start</code> state to process
the intervening tokens before recognising the closing delimiter. The bracket
matcher is responsible for converting the types of the tokens in between into
comment types. This scheme allows the Snipe editor to ensure that small local
changes to the program text cause only small local changes to what appears on
the screen, even when the user is commenting out sections of source text.</p>

<p>For a tag-based language such as HTML or XML, types <code>TagB</code>,
<code>Tag</code> and <code>TagE</code> can be used to handle and match tags.
For example, to recognise the start tag <code>&lt;html></code>, after treating
the <code>&lt;</code> sign as a separate token, this rule can be used:</p>

<pre>start html attributes TagB
</pre>

<p>Any attributes and the final <code>></code> sign are treated as separate
tokens. The matching end tag <code>&lt;/html></code> can be handled with a rule
like this:</p>

<pre>start html spaces TagE
</pre>

<p>Again, the <code>&lt;/</code> and <code>></code> are treated as separate
tokens so that the name alone is treated as a bracket. For this rule to apply,
<code>html</code> must be next in the input, a token of type <code>TagB</code>
must be at the top of the stack, and the open bracket must also have the name
<code>html</code>.</p>

<h2>States</h2>

<p>A state is defined by the rules which have that state as their base state.
The base state of the first rule in a language description is the starting
state for the scanner when scanning of a source text begins. The rules defining
a state can be in any order and need not necessarily be contiguous. If the
input matches a pattern mentioned in any one of the rules for a state, that
rule is applied. For example:</p>

<pre>start == != start Op
start a..z A..Z id
</pre>

<p>In the <code>start</code> state, if an equality operator appears next in the
input, it is marked with type <code>Op</code> and the scanner remains in the
<code>start</code> state, whereas if a letter appears, the scanner goes into
the <code>id</code> state. If two different patterns, whether normal or
lookahead, match at one position in the input, the longer pattern takes
precedence:</p>

<pre>start = start Sign
start == != start Op
</pre>

<p>In this example, if there are two equal signs next in the input, the second
rule applies, not the first. If there is only a single equal sign, the first
rule applies.</p>

<p>A state should not have two pattern strings which are the same,
even if one is a lookahead and the other is not. The only exception is when
there are two or more possible bracket types that can be popped:</p>

<pre>start } state1 GroupE
start } state2 BlockE
</pre>

<p>This might occur in a language where curly brackets are used both for blocks
and for grouping. It is desirable to give them different types, because they
affect semicolon insertion in different ways. For these rules to apply, an open
curly bracket must have been pushed on the stack either as <code>GroupB</code>
or as <code>BlockB</code>, presumably in one of two different places in the
language definition. When a close curly bracket is matched in the
<code>start</code> state, the relevant one of the two rules shown matches,
causing a jump to one of two different states. If neither rule matches, the
default is that the brackets are marked as mismatched and the scanner stays in
the same state.</p>

<p>If a single character is matched directly by one pattern and as
part of a range in another pattern, the direct pattern takes precedence:</p>

<pre>string !..~ string
string " start Quote
</pre>

<p>Here, if a double quote <code>"</code> is next in the input, the second rule
is applied, even though <code>"</code> is included in the range in the first
rule. If a single character is matched by two ranges, and one is a subrange of
the other, the subrange takes precedence. For example:</p>

<pre>id a..z A..Z 0..9 id
id \ start Id
</pre>

<p>If a letter or digit appears next, the first rule applies, even though
letters and digits are included in the implicit range in the second rule. If
any other character appears, the second rule applies.</p>

<p>Any ambiguity not covered above between two patterns in the rules for a state
is an error. For example, overlapping ranges such as <code>0..5</code> and
<code>5..9</code> are incompatible.</p>

<p>When a language description is processed, various checks are made to ensure
that the scanner never fails, partitions the whole input into tokens and
separators, handles all possible inputs, and terminates without getting stuck
in a loop.</p>

<p>There is a check that every state handles all the single characters
<code>!..~ \s \n</code> in some way. Where a lookahead pattern other than
<code>\s</code> or <code>\n</code> in a rule with no type causes a jump between
states without making progress, there is a check that no infinite loop of jumps
can occur. To ensure that there is always a non-empty token to carry bracket
information, there is a check that a type with a <code>B</code> or
<code>E</code> suffix is not used with a lookahead pattern.</p>

<h2>Types</h2>

<p>These are the available token types, and their intended meanings:</p>

<pre>Keyword, Alternative, Declaration       - kinds of keyword
Identifier, Function, Property          - kinds of identifier
Operator, Unary, Mark, Join,            - operators and punctuation
Value, Wrong                            - constants, illegal tokens
QuoteD, Quote, NoteD, Note              - one-line quotes and comments
LongB, Long, LongE                      - multi-line quotes
CommentB, CommentE                      - multi-line comments
CommentNB, CommentNE                    - nesting comments
TagB, Tag, TagE                         - parts of HTML-like tags
RoundB, RoundE, Round2B, Round2E        - round brackets
SquareB, SquareE, Square2B, Square2E    - square brackets
GroupB, GroupE, Group2B, Group2E        - group brackets
BlockB, BlockE, Block2B, Block2E        - block brackets
</pre>

<p>The type names without suffixes can be shortened to any abbreviation, e.g.
<code>Key</code>, <code>Id</code>, <code>Op</code>, or even <code>K</code>,
<code>I</code>, <code>O</code>. The scanning conventions and the types are
designed to help with syntax highlighting, reformatting, bracket matching,
indenting, semicolon insertion, and incremental rescanning as follows.</p>

<p><b>Syntax highlighting:</b> Each token type can be displayed differently,
according to a theme definition. Suffixes are ignored.</p>

<p><b>Reformatting:</b> The scanning conventions ensure that comments are
divided into word-like tokens, with spaces and newlines as separators. This
helps with reformatting comments, as well as with word-based cursor movement. A
multiline comment is reformatted by changing the line breaks so that the
maximum number of tokens fit on each line without exceeding the window width.
However, a blank line or a line beginning with at least one space is not
combined with the previous line. A sequence of one-line comments is treated
similarly, except that the first token on each line (e.g. <code>//</code>) is
left in place, and a line where the first token is not followed by a space or
is followed by two or more spaces is not combined with the previous line.</p>

<p><b>Bracket matching:</b> A stack of open brackets is maintained by the
scanner, and manipulated by the push and pop conventions. If a pop succeeds,
the two brackets are matched. If it fails, the brackets are marked as
mismatched. This bracket matching can also be used to control the actions of
the state machine, so that relatively complex contexts can be detected.</p>

<p>Round, square and group bracket types are provided. Group brackets are
brackets which are used in the same manner as round or square brackets. There
is no difference between these bracket types, except that they are marked as
mismatched if they don't come in matching pairs. There are also block brackets,
which have a different effect on semicolon insertion. For each of the four
kinds of bracket types, there is an alternative such as <code>Round2B</code>,
<code>Round2E</code> which can be used in a language definition to detect
syntactic contexts.</p>

<p>The bracket matching algorithm is unusual, in that matching is notionally
done forwards from the start of the text to the cursor position, and backwards
from the end of the text to the cursor position. In addition, it is bracket
matching that is responsible for converting tokens between multiline comment
delimiters from normal types to a commented type. This approach guards against
a lot of distracting changes on screen for the user, e.g. when typing an open
multiline comment delimiter to begin commenting out.</p>

<p><b>Indenting:</b> Snipe has a very simple and uniform rule for fully
automatic indenting. The indent of a line is determined by the number of
unmatched open brackets in the source text. Lines belonging to multi-line
comments or quotes are not automatically indented, whereas lines with one-line
comments or quotes are indented.</p>

<p><b>Semicolon insertion:</b> Snipe inserts semicolons at the ends of lines
where appropriate, using a simple and uniform rule. A line should have a final
semicolon added unless it ends with a prefix token, or the following line
begins with a postfix token. A token is regarded as prefix if it expects an
immediately following token other than semicolon, as postfix if it expects an
immediately preceding token other than semicolon.</p>

<p>Most token types are nonfix. The types <code>Op</code>, <code>Mark</code> and
<code>Join</code> are infix. A <code>Unary</code> operator
(e.g. <code>++</code>) is regarded as nonfix, on the assumption that a newline
is unlikely to separate it from its operand. An operator such as minus which
can be either prefix or infix is best declared as infix if it is more likely to
be used to indicate a continuation line, or as nonfix if it is more likely to
appear at the start of a statement.</p>

<p>Opening and closing brackets other than block brackets are treated as prefix
and postfix respectively. An opening block bracket is treated as infix rather
than prefix, on the assumption that it is the start of a block which is
attached to the end of a statement, so shouldn't be preceded by a semicolon. A
closing block bracket is treated as prefix rather than postfix, on the
assumption that it closes a block, so a semicolon is appropriate before it but
not after it.</p>

<p>Languages in the C family often use curly brackets <code>{}</code> both as
block brackets and as inline brackets. In the latter case, a semicolon is
required after the close bracket. To cope with this, the language definition
can give the open bracket either the type, say, <code>GroupB</code> or
<code>BlockB</code> according to context, and use bracket matching to ensure
that the corresponding close bracket is given type <code>GroupE</code> or
<code>BlockE</code> to match.</p>

<p><b>Incremental rescanning:</b> A line of source text can be rescanned
individually, using only a recorded start state for the line, and the relevant
stack of preceding unmatched open brackets. The stack can be maintained or
reconstructed as necessary.</p>

<p>When a newline is matched with a <code>\n</code> lookahead pattern, the
target state can be recorded as the starting state for the line following the
newline. The scanner can then rescan the line in isolation by starting in that
state. A scanning state can, in general, depend on characters beyond the
current scanning position, because of lookahead patterns. However, language
rules cannot look ahead past a newline, so the start state for a line depends
only on the previous lines.</p>

<p>The fact that lines can be rescanned individually makes it easy to interleave
rescanning with user actions, to avoid long pauses.</p>

<h2>Examples</h2>

<p>In many programming languages, an identifier is allowed to start with a
keyword. In that case, identifiers can be handled by rules like these:</p>

<pre>start  if else for while  key
start  a..z A..Z          id

key    a..z A..Z 0..9     id
key    \                  start Key

id     a..z A..Z 0..9     id
id     \                  start Id
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. The scanner
goes to the <code>key</code> state which gives the token the type
<code>Key</code>. Suppose instead that the identifier <code>form</code> appears
next in the input. The prefix <code>for</code> is matched and the scanner goes
into the <code>key</code> state. Then the <code>m</code> is matched, the
scanner goes into the <code>id</code> state, and the token ends up being given
the type <code>Id</code>.</p>

<p>Sometimes, judgement has to be used to decide how to handle operators, with
regard to semicolon insertion. In general, with an operator such as a minus
sign which can be infix or prefix, it is better to declare it as infix
(type <code>Op</code>). This means a semicolon is never expected before or after
it. If used at the start or end of a line, it indicates a continuation. The
only situation where this gives the wrong result is where a statement begins
with a minus sign, which is rare.</p>

<p>On the other hand, the times <code>*</code> operator in the C or C++
languages, which is also used as a prefix dereference operator, quite often
appears at the start of a statement:</p>

<pre>n = 0;
*p = 0
</pre>

<p>So in that case, it is better to give it type <code>Unary</code>, i.e.
nonfix, on the basis that it is probably rarer for it to be used to continue a
statement across lines.</p>

<p>In some languages, block brackets can be used on their own to establish an
inner scope:</p>

<pre>{
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>In that case, a preceding semicolon is expected. It doesn't seem practical to
detect this situation without full parsing. The simplest approach would
seem to be to assume that a block is always attached to the end of a statement,
and to avoid this fairly rare situation by writing something of the form:</p>

<pre>if (true) {
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>A language construct which contains spaces or newlines needs to be divided
into mini-tokens. For example, one-line comments, say starting with
<code>//</code> and continuing to the end of the line, can be handled with
rules of the form:</p>

<pre>start    //     note NoteD
note     !..~   note
note     \s     note Note
note     \n     start Note
</pre>

<p>There is no explicit end-of-comment delimiter. The <code>NoteD</code> token
is implictly regarded as being matched by the end-of-line.</p>

<p>Where there is a closing delimiter, the rules are slightly trickier. For
example, one line string literals can be handled by rules:</p>

<pre>start   "      string QuoteD
string    !..~   string
string    \\"    string
string    \"     string2 Quote
string    \s     string Quote
string    \n     start Quote

string2   "      start QuoteD
string2   \      start Wrong
</pre>

<p>The <code>string</code> state has a rule for <code>\\"</code> which makes
sure that a <code>\"</code> sequence in the literal isn't treated as a
terminator. It also has a lookahead <code>\"</code> for the closing delimiter,
to ensure that any preceding characters are given the type <code>Quote</code>.
Then the <code>string2</code> state matches the final delimiter and gives it
type <code>QuoteD</code>. The <code>string2</code> state also has a default
rule, even though it will never be used, just so that it passes the
completeness checks.</p>

<p>Multi-line comments, say starting with <code>/*</code> and ending with
<code>*/</code> and not nesting, can be handled by:</p>

<pre>start  /*  start CommentB
start  */  start CommentE
</pre>

<p>Scanning continues as normal after the opening delimiter, but the bracket
matcher implicitly converts the tokens to a commented type (in a reversible
way). For correctly matched delimiters, the entire comment is converted and
displayed as normal. For an opening delimiter with no closing delimiter, the
conversion only goes as far as the current cursor position, and tokens after
that appear uncommented, as if the text after the cursor was processed
backwards from the end of the file. An opening delimiter inside a multiline
comment is treated as an error, even though the language may allow it, on the
basis that it is very likely not intentional. The <code>CommentNB</code> and
<code>CommentNE</code> types can be used for a language with comments that
nest.</p>

<p>Languages in the C family often use curly brackets both as block brackets and
as inline brackets. To give them different types, the contexts in which inline
brackets appear can be detected using bracket matching. For example, one
context in C where inline curly brackets are used is the right hand sign of an
assignment:</p>

<pre>= (...) { ... }
</pre>

<p>The round brackets can, in principle, contain an arbitrarily complex type
expression, with brackets of its own. By giving these round brackets different
types from the usual ones, the scanner can match them up and so detect the
opening inline curly bracket which follows. For example, the relevant rules might
be:</p>

<pre>start { start BlockB
start ( start RoundB
start } start BlockE
start } start GroupE
start ) start RoundE
start ) eqtype Round2E
start = eq Op

eq ( start Round2B

eqtype { GroupB
</pre>

<p>The types <code>BlockB</code> and <code>BlockB</code> are being used for
block brackets, <code>GroupB</code> and <code>GroupE</code> for inline
curly brackets, <code>RoundB</code> and <code>RoundE</code> for ordinary
round brackets and <code>Round2B</code> and <code>Round2E</code> for round
brackets immediately after an equal sign.</p>

<p>After matching an equal sign, the <code>eq</code> state causes a
<code>Round2B</code> token to be pushed on the bracket stack. The scanner then
returns to the <code>start</code> state to process the type expression. When
the <code>Round2B</code> token comes back to the top of the stack and the open
round bracket is matched as <code>Round2E</code>, the scanner jumps to the
<code>eqtype</code> state to give the following open curly bracket the
<code>GroupB</code> type. When the matching closing bracket appears in the
<code>start</code> state, it is given the type <code>GroupE</code> instead of
<code>BlockE</code>, so that it expects a semicolon.</p>

<p>Some languages support template strings, with embedded substitution
expressions. for example:</p>

<pre>`a = ${a} and b = ${b}`
</pre>

<p>An expression between <code>${</code> and <code>}</code> can be arbitrarily
complicated, including its own curly brackets and template delimiters, so these
brackets need to be matched in order to detect the return to the parent
template. That can be done with rules of the form:</p>

<pre>start ` template LongB
start } start BlockE
start } template Group2E

template   \${    template2 Long
template   !..~   template
template   \s \n  template Long
template   `      start LongE

template2  ${     start Group2B
template2  \      start Wrong
</pre>

<p>The <code>template</code> state uses a lookahead for <code>${</code> to
ensure that all the text up to that point is included in <code>Long</code>
tokens. The <code>template2</code> state gives <code>${</code> the type
<code>Group2B</code>, treating it as an alternative type of group bracket. The
<code>template2</code> state also has a default rule for completeness. The
scanner then goes to the start state to handle whatever is within the brackets.
The <code>start</code> state recognises the matching close curly bracket,
giving it type <code>Group2E</code>, and returns to the <code>template</code>
state to deal with the rest of the template.</p>

<p>In a language definition for a tag-based language like HTML, start and end
tags should be treated as brackets, in order to match them up. It is tempting
to write rules like this:</p>

<pre>start &lt;html> start TagB
start &lt;body> start TagB
...
start &lt;/html> start TagE
start &lt;/body> start TagE
...
</pre>

<p>This is not appropriate, for several reasons. First, HTML has a large number
of tag names. Although the state machine effectively switches on the first
character of patterns, it does a linear search through the patterns that start
with the same first character. So these rules could lead to a noticeable
inefficiency. Second, the bracket matcher automatically compares the spellings
of start and end tags, but expects to be given the raw names so that it can
avoid making any assumptions about what surrounds them. Taking off the
<code>&lt;</code> and <code>&lt;/</code> achieves this. Third, the bracket name
may be followed by spaces or attributes. And fourth, it is reasonable to
highlight the symbols <code>&lt;</code>, <code>&lt;/</code>, <code>></code>
differently from the names inside them. So it is better to use rules of this
form:</p>

<pre>start &lt; open Mark
start &lt;/ close Mark

open html attributes TagB
open body attributes TagB

close html spaces TagE
close body spaces TagE
</pre>

<p>The <code>attributes</code> and <code>spaces</code> states can be defined to
handle the remainder of each tag.</p>

<h2>Tests</h2>

<p>A language description can contain tests, which also act as examples
illustrating the operation of the rules. A line starting with <code>></code>
represents a line of source text. An immediately following line starting with
<code>&lt;</code> represents the output from the scanner. For example:</p>

<pre>&gt; (count + 1)
&lt; RI---- O VR
</pre>

<p>The output has the one-letter abbreviation for the type of each token, placed
under its first character. Characters of a token after the first are marked
with minus signs. The scanner state after scanning the input line is used as
the start state for the next test, which allows for extended examples.</p>

<p>Bracket matching results in bracket tokens being marked with lower case
letters if they are mismatched:</p>

<pre>&gt; (count + 1]
&lt; rI---- O Vs.
</pre>

<p>The tests are all carried out together, so that bracket matching in one test
can affect the results from a previous test.</p>

<pre>&gt; open (
&lt; I--- r
&gt; close ]
&lt; I---- s
</pre>

<p>If a test fails, a trace of execution of the scanner is shown.</p>

<!--

<h3>Bracket Matching</h3>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence:</p>

<pre>(...(...)
</pre>

<p>can be treated in either of these two ways:</p>

<pre class="match">(...<b>(</b>...)
<b>(</b>...(...)
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using <code>|</code> to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(...<b>(</b>.<u>|</u>.)
<b>(</b>.<u>|</u>.(...)
</pre>

<p>In both cases, the surplus bracket closest to the cursor is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match">   <i>/*...<b>/*</b>...*/</i>...<b>*/</b>..<u>|</u>
<u>|</u>..<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b></i><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b>...</i><u>|</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>|</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>|</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>|</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>|</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>|</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>
-->

</body>
</html>
