<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<!-- TODO C++, Java, Python, Haskell, HTML -->

<p><mark>Snipe</mark > has a scanner, which is implemented as a string-matching
state machine. It divides a source text into tokens, and gives each token a
type. It:</p>

<ul>
<li>includes bracket matching</li>
<li>partitions the whole text into tokens, whether valid or not</li>
<li>supports dynamic loading of language definitions</li>
<li>supports incremental rescanning</li>
<li>aids indenting, semicolon insertion, and comment reformatting</li>
<li>is approximate compared to a compiler</li>
</ul>

<p>Languages for programming editors are often expressed using regular
expressions. Languages for Snipe are instead expressed as state machine tables.
These are easier to read and maintain, and only a little less compact. In
addition, stack-based bracket matching is supported, which regular expressions
can't handle.</p>

<p>For example, the C language is described by the <code>c.txt</code> file in
the directory <code>snipe/languages</code>. The commands <code>make
compile</code> and <code>./compile c.txt</code> can be used to compile the
file. The compiler analyses the language definition to ensure that the scanner
can handle any source text, and that it can't get stuck in an infinite loop. It
then carries out tests which are included in the <code>c.txt</code> file and,
if they pass, produces a compact table in file <code>c.bin</code> for use by
Snipe's scanner.</p>

<h2>Rules</h2>

<p>A language description contains simple text (<u title="aka ASCII (obsolete
and non-international)">basic Latin</u> characters <code>' '</code> to
<code>'~'</code> plus <code>'\n'</code>). The rules in the file specify how
simple source text is divided into tokens. The scanner which uses the
description treats every Unicode character beyond basic Latin in the same
way as letters. That is sufficient to handle the common uses of Unicode in
identifiers, string literals and comments.</p>

<p>In a language description file, a line which is blank or begins with a
non-letter such as <code>#</code> or <code>/</code> is a comment line which is
ignored, or is a line used for testing. Otherwise, a line represents a
string-matching rule.</p>

<p>A rule has a base state name, a list of patterns to match, and a target state
name, all separated by spaces. A state name is a lower case word, possibly
including digits. A pattern is a sequence of characters other than space or
newline. When the scanner is in the base state of a rule and one of the
patterns appears next in the input, the scanner moves past the matched
characters to include them in the token currently being scanned, and goes into
the target state. For example:</p>

<pre>start " string
</pre>

<p>With this rule, if the scanner is in the <code>start</code> state and a
double quote character appears next in the input, the scanner moves past the
character and goes into the <code>string</code> state.</p>

<p>A rule may have a token type after the target state. A type is a constant
beginning with an upper case letter, and must be one of the ones listed later.
If a rule has a type, the current token is ended, and given that type. For
example:</p>

<pre>start == != start Op
</pre>

<p>With this rule, in the <code>start</code> state, if either of the equality
operators <code>==</code> or <code>!=</code> appears next in the input, then
the scanner moves past the operator, makes it a token with type
<code>Op</code>, and goes to the <code>start</code> state.</p>

<p>A pattern can consist of two dots with a character on either side:</p>

<pre>start 0..9 number
</pre>

<p>The pattern represents a range of one-character patterns, so the rule is
equivalent to:</p>

<pre>start 0 1 2 3 4 5 6 7 8 9 number
</pre>

<p>If the scanner is in the <code>start</code> state, and a digit appears next
in the input, the scanner matches the digit and goes into the
<code>number</code> state.</p>

<p>The pattern <code>!..~</code> can be used to match any character other than
space or newline.</p>

<p>A limited form of lookahead is provided. If a pattern begins with a vertical
bar <code>|</code> then the characters are matched without being included in
the current token. For example:</p>

<pre>id |( start Function
</pre>

<p>In the <code>id</code> state, which presumably recognizes identifier tokens,
if the next character in the source text is an open round bracket, the current
token is given the type <code>Function</code> instead of <code>Id</code>. That
allows an identifier such as <code>f</code> to be highlighted differently when
it appears as <code>f(...)</code>. A lookahead pattern can be a range:</p>

<pre>dot |0..9 float
</pre>

<p>In the <code>dot</code> state, presumably just after recognizing a dot
character, if a digit appears next in the source text, the scanner goes to the
<code>float</code> state without moving past the digit.</p>

<p>A pattern consisting of a vertical bar on its own is an abbreviation for the
pattern <code>|\n..~</code> which is a range covering all characters. This can
be used in default rules. For example:</p>

<pre>id | start Id
</pre>

<p>When scanning an identifier, if any character is seen which is not covered by
other rules, the token is terminated, given type <code>Id</code>, and scanning
continues in the <code>start</code> state.</p>

<p>The backslash character is used for escape sequences:</p>

<pre>\s       space
\n       newline
\\       literal backslash
\|       literal vertical bar
</pre>

<p>These allow special characters to be included in a pattern. For example:</p>

<pre>start \s \n start Gap
</pre>

<p>This marks a space or a newline as a separator token of type
<code>Gap</code>. If a lookahead pattern matches when the current token is
empty, and the rule has a type, the type is ignored. For example:</p>

<pre>note |\n start Comment
</pre>

<p>While scanning a one-line comment, this rule ensures that any remaining
characters on the line are given type <code>Comment</code>. If, however, the
comment is empty so that there are no remaining characters, the type has no
effect and the scanner goes to the <code>start</code> state.</p>

<p>Brackets are automatically matched. Bracket tokens have a suffix
<code>B</code> (for begin) if they are opening brackets or <code>E</code>
(for end) if they are closing brackets. For example:</p>

<pre>start ( start RoundB
</pre>

<p>When this rule is obeyed, as well as giving the bracket the type
<code>RoundB</code>, the bracket is pushed on the stack of unmatched opening
brackets (i.e. the position and type of the token is remembered). A closing
bracket causes an item to be popped off the stack. For example:</p>

<pre>start ) start RoundE
</pre>

<p>For this rule to be obeyed, as well as the closing bracket being next in the
input, the top item on the stack must be a <code>RoundB</code> bracket. If so,
the stack is popped, the closing bracket is given the type <code>RoundE</code>,
and the two brackets are marked as matching. The default, if there is no other
rule that applies, is that the opening and closing brackets are marked as
mismatching. A closing bracket is also marked as a mismatch if the stack is
empty.</p>

<p>Comment delimiters are treated as brackets, using <code>CommentB</code> for
the opening delimiter, <code>CommentE</code> for the closing delimiter, and
<code>Comment</code> for the tokens in between:</p>

<pre>start /* comment CommentB
</pre>

<p>Delimiters of quoted literals are treated as brackets, whether one-line or
multi-line, with <code>QuoteB</code> for the opening delimiter,
<code>QuoteE</code> for the closing delimiter, and <code>Quote</code> for the
tokens in between:</p>

<pre>start " string QuoteB
</pre>

<p>For a tag-based language such as HTML or XML, types <code>TagB</code>,
<code>Tag</code> and <code>TagE</code> can be used to handle and match tags.
For example, to recognise the start tag <code>&lt;html></code>, after treating
the <code>&lt;</code> sign as a separate token, this rule can be used:</p>

<pre>start html attributes TagB
</pre>

<p>Any attributes and the final <code>></code> sign are treated as separate
tokens. The matching end tag <code>&lt;/html></code> can be handled with a rule
like this:</p>

<pre>start html spaces TagE
</pre>

<p>Again, the <code>&lt;/</code> and <code>></code> are treated as separate
tokens so that the name alone is treated as a bracket. For this rule to apply,
<code>html</code> must be next in the input, a token of type <code>TagB</code>
must be at the top of the stack, and the opening and closing brackets must have
the same name, in this case <code>html</code>.</p>

<h2>States</h2>

<p>A state is defined by the rules which have that state as their base state.
The base state of the first rule in a language description is the starting
state for the scanner when scanning of a source text begins. The rules defining
a state can be in any order and need not necessarily be contiguous. If the
input matches a pattern mentioned in any one of the rules for a state, that
rule is applied. For example:</p>

<pre>start == != start Op
start a..z A..Z id
</pre>

<p>In the <code>start</code> state, if an equality operator appears next in the
input, it is marked with type <code>Op</code> and the scanner remains in the
<code>start</code> state, whereas if a letter appears, the scanner goes into
the <code>id</code> state. If two different patterns match at one position in
the input, the longer pattern takes precedence:</p>

<pre>start = start Sign
start == != start Op
</pre>

<p>In this example, if there are two equal signs next in the input, the second
rule applies, not the first. If there is only a single equal sign, the first
rule applies.</p>

<p>A state should not normally have two pattern strings which are the same. One
exception to the rule is when there are two or more possible bracket types that
can be popped:</p>

<pre>start } state1 BlockE
start } state2 GroupE
</pre>

<p>This might occur in a language where curly brackets are used both for blocks
and for grouping. It is desirable to give them different types, because they
affect semicolon insertion in different ways. For these rules to apply, an open
curly bracket must have been pushed on the stack either as <code>BlockB</code>
or as <code>GroupB</code>, presumably in one of two different places in the
language definition. When a close curly bracket is matched in the
<code>start</code> state, the relevant one of the two rules shown matches,
causing a jump to one of two different states. If neither rule matches, the
default is that the brackets are marked as mismatched and the scanner stays in
the same state.</p>

<p>A second exception to the rule about pattern strings being distinct is where
one is a lookahead and the other is a non-lookahead pattern. The lookahead
pattern applies if there is a non-empty current token, and the non-lookahead
pattern applies otherwise:</p>

<pre>note |\s note Comment
note \s  note Gap
</pre>

<p>These rules deal with a space encountered while scanning a one-line comment.
If there is a non-empty current token, the first rule applies and the token is
given the type <code>Comment</code>. The current token is then empty, so the
second rule applies, and the space is given the type <code>Gap</code>.</p>

<p>If a single character is matched directly by one pattern and as
part of a range in another pattern, the direct pattern takes precedence:</p>

<pre>string !..~ string
string " start Quote
</pre>

<p>Here, if a double quote <code>"</code> is next in the input, the second rule
is applied, even though <code>"</code> is included in the range in the first
rule. If a single character is matched by two ranges, and one is a subrange of
the other, the subrange takes precedence. For example:</p>

<pre>id a..z A..Z 0..9 id
id | start Id
</pre>

<p>If a letter or digit appears next, the first rule applies, even though
letters and digits are included in the implicit range in the second rule. If
any other character appears, the second rule applies.</p>

<p>Any ambiguity not covered above between two patterns in the rules for a state
is an error. For example, overlapping ranges such as <code>0..5</code> and
<code>5..9</code> are incompatible.</p>

<p>When a language description is processed, various checks are made. There is a
check that every state handles all the single characters <code>!..~</code>
<code>\s</code> <code>\n</code> in some way, to ensure that the scanner
partitions the whole input into tokens and never fails. Where a lookahead
pattern causes a jump between states without making progress, there is a check
that no loop of such jumps can occur, to ensure that the scanner always
terminates. There is a check that if a rule has a bracket type with a
<code>B</code> or <code>E</code> suffix, then the current token cannot be
empty, to ensure that brackets cannot be ignored.</p>

<p>There are also warnings given where the language description might not be
suitable for use in the editor. A warning is given is there is a lookahead past
a newline, because that would prevent simple line-at-a-time rescanning. A
warning is given if a space or newline is included in a longer token, rather
than forming a separator on its own, because that potentially goes against the
idea of breaking long constructs into mini-tokens. It is normal to give a space
or newline the type <code>Gap</code>. However, it is sometimes necessary to
give a newline a different type, for example <code>CommentE</code> to mark the
end of a one-line comment.</p>

<h2>Types</h2>

<p>These are the available token types, and their intended meanings:</p>

<pre>Keyword, Declaration, Alternative       - kinds of keyword
Identifier, Function, Property          - kinds of identifier
Operator, Unary, Sign, Mark             - operators and punctuation
Value, Gap, Error                       - constants, separators, illegal tokens
QuoteB, Quote, QuoteE                   - one-line or multi-line quotes
CommentB, Comment, CommentE             - one-line or multi-line comments
TagB, Tag, TagE                         - HTML-like tag names
Bracket                                 - unspecified bracket
RoundB, RoundE, SquareB, SquareE        - round and square brackets
GroupB, GroupE, BlockB, BlockE          - group and block brackets
Quote2B, Quote2E, Comment2B, Comment2E  - alternatives
Round2B, Round2E, Square2B, Square2E
Group2B, Group2E, Block2B, Block2E
</pre>

<p>The type names can be shortened to any unique abbreviation, e.g.
<code>Key</code>, <code>Id</code>, <code>Op</code>, or even <code>K</code>,
<code>I</code>, <code>O</code>. The scanning conventions and the types are
designed to help with syntax highlighting, reformatting, bracket matching,
indenting, semicolon insertion, and incremental rescanning as follows.</p>

<p><b>Syntax highlighting:</b> Each token type can be displayed differently,
according to a theme definition. Types with suffixes are converted to
<code>Quote</code>, <code>Comment</code>, <code>Tag</code> or
<code>Bracket</code> for display purposes.</p>

<p><b>Reformatting:</b> The scanning conventions ensure that comments are
divided into word-like tokens, with spaces and newlines as separators. This
helps with reformatting comments, as well as with word-based cursor movement. A
multiline comment is reformatted by changing the line breaks so that the
maximum number of tokens fit on each line without exceeding the window width.
However, a blank line or a line beginning with at least one space is not
combined with the previous line. A sequence of one-line comments is treated
similarly, except that the first token on each line (e.g. <code>//</code>) is
left in place, and a line where the first token is not followed by a space or
is followed by two or more spaces is not combined with the previous line.</p>

<p><b>Bracket matching:</b> A stack of open brackets is maintained by the
scanner, and manipulated by the push and pop conventions. If a pop succeeds,
the two brackets are matched. If it fails, the brackets are marked as
mismatched. This bracket matching can also be used to control the actions of
the state machine, so that relatively complex contexts can be detected.</p>

<p>Round, square and group bracket types are provided. Group brackets are
brackets which are used in the same manner as round or square brackets. There
is no difference between these bracket types, except that they are marked as
mismatched if they don't come in matching pairs. There are also block brackets,
which have a different effect on semicolon insertion. For each of the four
kinds of bracket types, there is an alternative such as <code>Round2B</code>,
<code>Round2E</code> which can be used in a language definition to detect
syntactic contexts.</p>

<p>The bracket matching algorithm is unusual, in that matching is notionally
done forwards from the start of the text to the cursor position, and backwards
from the end of the text to the cursor position. This allows a mismatched
bracket to be pinpointed more accurately.</p>

<p><b>Indenting:</b> Snipe has a very simple and uniform rule for fully
automatic indenting. The indent of a line is determined by the number of
unmatched open brackets in the source text up to that point. The indent of a
line after the cursor is determined by the number of unmatched close brackets,
working backwards from the end of the text. This provides visual stability
while the current line is being edited. Lines belonging to multi-line comments
or quotes are not automatically indented, whereas lines with one-line comments
or quotes are automatically indented.</p>

<p><b>Semicolon insertion:</b> Snipe inserts semicolons at the ends of lines
where appropriate, using a simple and uniform rule. A line should have a final
semicolon added unless it ends with a prefix or infix token, or the following
line begins with a postfix or infix token. A token is regarded as prefix if it
expects an immediately following token other than a semicolon, as postfix if it
expects an immediately preceding token other than a semicolon, and as infix if
it expects both.</p>

<p>Most token types are nonfix. The types <code>Sign</code> and <code>Op</code>
are for infix punctuation marks and operators. A <code>Mark</code> is a nonfix
punctuation mark. A <code>Unary</code> operator (e.g. <code>++</code>) is
regarded as nonfix, on the assumption that it is unlikely to be separated from
its operand by a newline. An operator such as minus which can be either prefix
or infix is best declared as infix if it is more likely to be used at the start
a continuation line, or as nonfix if it is more likely to be used at the start
of a statement.</p>

<p>Opening and closing brackets other than block brackets are treated as prefix
and postfix respectively. An opening block bracket is treated as infix rather
than prefix, on the assumption that it is the start of a block which is
attached to the end of a statement, so shouldn't be preceded by a semicolon. A
closing block bracket is treated as prefix rather than postfix, on the
assumption that it closes a block, so a semicolon is appropriate before it but
not after it.</p>

<p>Languages in the C family often use curly brackets <code>{}</code> both as
block brackets and as group brackets. In the latter case, a semicolon is
required after the close bracket. To cope with this, the language definition
can give the open bracket either the type <code>BlockB</code> or
<code>GroupB</code> according to context, and use bracket matching to ensure
that the corresponding close bracket is given type <code>BlockE</code> or
<code>GroupE</code> to match.</p>

<p><b>Incremental rescanning:</b> A line of source text can be rescanned
individually, using only a recorded start state for the line, and the relevant
stack of preceding unmatched open brackets.</p>

<p>After a newline is matched, the target state can be recorded as the starting
state for the line following the newline. The scanner can then rescan the line
in isolation by starting in that state. A scanning state can, in general,
depend on characters beyond the current scanning position, because of lookahead
patterns. However, if there is no lookahead past a newline, the start state for
a line depends only on the previous lines.</p>

<p>The fact that lines can be rescanned individually makes it easy to interleave
rescanning with user actions, to avoid long pauses.</p>

<h2>Examples</h2>

<p>In many programming languages, an identifier is allowed to start with a
keyword. In that case, identifiers can be handled by rules like these:</p>

<pre>start  if else for while  key
start  a..z A..Z          id
...

key    a..z A..Z 0..9     id
key    |                  start Key

id     a..z A..Z 0..9     id
id     |                  start Id
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. The scanner
goes to the <code>key</code> state which gives the token the type
<code>Key</code>. Suppose instead that the identifier <code>form</code> appears
next in the input. The prefix <code>for</code> is matched and the scanner goes
into the <code>key</code> state. Then the <code>m</code> is matched, the
scanner goes into the <code>id</code> state, and the token ends up being given
the type <code>Id</code>.</p>

<p>Sometimes, judgement has to be used to decide how to handle operators, with
regard to semicolon insertion. In general, with an operator such as a minus
sign which can be infix or prefix, it is better to declare it as infix
(type <code>Op</code>). This means a semicolon is never expected before or after
it. If used at the start or end of a line, it indicates a continuation. The
only situation where this gives the wrong result is where a statement begins
with a minus sign, which is rare.</p>

<p>On the other hand, the times <code>*</code> operator in the C or C++
languages, which is also used as a prefix dereference operator, quite often
appears at the start of a statement:</p>

<pre>n = 0;
*p = 0
</pre>

<p>So in that case, it is better to give it type <code>Unary</code>, i.e.
nonfix, on the basis that it is probably rarer for it to be used to continue a
statement across lines.</p>

<p>In some languages, block brackets can be used on their own to establish an
inner scope:</p>

<pre>{
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>In that case, a preceding semicolon is expected. It doesn't seem practical to
detect this situation without full parsing. The simplest approach would
seem to be to assume that a block is always attached to the end of a statement,
and to avoid this fairly rare situation by writing something of the form:</p>

<pre>if (true) {
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>A language construct which contains spaces or newlines needs to be divided
into mini-tokens. For example, one-line comments, say starting with
<code>//</code> and continuing to the end of the line, can be handled with
rules of the form:</p>

<pre>start    //     note CommentB
note     !..~   note
note     |\s    note Comment
note     \s     note Gap
note     |\n    note Comment
note     \n     start CommentE
</pre>

<p>Any non-empty token before a space or a newline is given a type by the
<code>|\s</code> or <code>|\n</code> pattern. A space is given the separator
type <code>Gap</code>, whereas a newline is given the type
<code>CommentE</code> to terminate the comment. A similar approach can be taken
with delimiters. A one-line string literal can be handled using rules such
as:</p>

<pre>start     "      string QuoteB
string    !..~   string
string    |\"    string
string    |\s    note Quote
string    \s     note Gap
string    |"     string Quote
string    "      start QuoteE
string    |\n    string Quote
string    \n     start Quote2E
</pre>

<p>The pattern <code>|\"</code> pattern deals with the fact that the escape
sequence <code>\"</code> is allowed inside strings. Spaces and newlines are
handled in a similar way to one-line comments, except that if the string is not
closed by the next newline, the newline is given type <code>Quote2E</code> to
close the construct and cause a deliberate mismatch with
<code>QuoteB</code>.</p>

<p>Multi-line comments, say starting with <code>/*</code> and ending with
<code>*/</code> and not nesting, can be handled by:</p>

<pre>start     /*     comment CommentB
comment   !..~   comment
comment   |\s    comment Comment
comment   \s     comment Gap
comment   |\n    comment Comment
comment   \n     comment Gap
comment   |/*    comment Comment
comment   /*     comment Error
comment   |*/    comment Comment
comment   */     start CommentE
</pre>

<p>There are lookahead patterns to detect separators and delimiters, and ensure
that anything preceding them is given the <code>Comment</code> type. Spaces and
newlines are given type <code>Gap</code>. Although an opening delimiter
<code>/*</code> is technically legal, it is marked as <code>Error</code> on the
basis that it is very likely not intentional, and a warning could be helpful.
The <code>Comment2B</code> and <code>Comment2E</code> types can be used for a
language with comments that nest. If <code>/*</code> and <code>*/</code>
comments nested, the rules could be:</p>

<pre>start     /*     comment CommentB
comment   !..~   comment
comment   |\s    comment Comment
comment   \s     comment Gap
comment   |\n    comment Comment
comment   \n     comment Gap
comment   |/*    comment Comment
comment   /*     comment Comment2B
comment   |*/    comment Comment
comment   */     comment Comment2E
comment   */     start CommentE
</pre>

<p>An inner open delimiter is given the alternative type <code>Comment2B</code>.
Then <code>*/</code> is matched either as <code>Comment2E</code> and scanning
continues in an outer comment, or as <code>CommentE</code> which exits from the
outermost comment.</p>

<p>Languages in the C family often use curly brackets both as block brackets and
as group brackets. To give them different types, the contexts in which group
brackets appear can be detected using bracket matching. For example, one
context in C where curly brackets are used for grouping is the right hand sign
of an assignment:</p>

<pre>= (...) { ... }
</pre>

<p>The round brackets can, in principle, contain an arbitrarily complex type
expression, with brackets of its own. By giving these round brackets different
types from the usual ones, the scanner can match them up and so detect the
opening curly group bracket which follows. For example, the relevant rules might
be:</p>

<pre>start { start BlockB
start ( start RoundB
start } start BlockE
start } start GroupE
start ) start RoundE
start ) eqtype Round2E
start = eq Op

eq ( start Round2B

eqtype { GroupB
</pre>

<p>The types <code>BlockB</code> and <code>BlockB</code> are being used for
block brackets, <code>GroupB</code> and <code>GroupE</code> for curly group
brackets, <code>RoundB</code> and <code>RoundE</code> for ordinary round
brackets and <code>Round2B</code> and <code>Round2E</code> for round brackets
immediately after an equal sign.</p>

<p>After matching an equal sign, the <code>eq</code> state causes a
<code>Round2B</code> token to be pushed on the bracket stack. The scanner then
returns to the <code>start</code> state to process the type expression. When
the <code>Round2B</code> token comes back to the top of the stack and the open
round bracket is matched as <code>Round2E</code>, the scanner jumps to the
<code>eqtype</code> state to give the following open curly bracket the
<code>GroupB</code> type. When the matching closing bracket appears in the
<code>start</code> state, it is given the type <code>GroupE</code> instead of
<code>BlockE</code>, so that it expects a semicolon.</p>

<p>Some languages support template strings, with embedded substitution
expressions. for example:</p>

<pre>`a = ${a} and b = ${b}`
</pre>

<p>An expression between <code>${</code> and <code>}</code> can be arbitrarily
complicated, including its own curly brackets and template delimiters, so these
brackets need to be matched in order to detect the return to the parent
template. That can be done with rules of the form:</p>

<pre>start ` template QuoteB
start } start BlockE
start } template Quote2E

template   |${    template Quote
template   ${     start Quote2B
template   !..~   template
template   |\s    template Quote
template   \s     template Gap
template   |\n    template Quote
template   \s     template Gap
template   `      start QuoteE
</pre>

<p>The <code>template</code> state uses a lookahead <code>|${</code> to ensure
that all the text up to that point is included in <code>Quote</code> tokens.
Then <code>${</code> is given the type <code>Quote2B</code>, treating it as an
alternative opener. The scanner then goes to the start state to handle whatever
is within the brackets. The <code>start</code> state recognises the matching
close curly bracket, giving it type <code>Quote2E</code>, and returns to the
<code>template</code> state to deal with the rest of the template.</p>

<p>In a language definition for a tag-based language like HTML, start and end
tags should be treated as brackets, in order to match them up. It is tempting
to write rules like this:</p>

<pre>start &lt;html> start TagB
start &lt;body> start TagB
...
start &lt;/html> start TagE
start &lt;/body> start TagE
...
</pre>

<p>This is not appropriate, for several reasons. First, HTML has a large number
of tag names. Although the state machine effectively switches on the first
character of patterns, it does a linear search through the patterns that start
with the same first character. So these rules could lead to a noticeable
inefficiency. Second, the bracket matcher automatically compares the spellings
of start and end tags, but expects to be given the raw names so that it can
avoid making any assumptions about what surrounds them. Taking off the
<code>&lt;</code> and <code>&lt;/</code> achieves this. Third, the tag name may
be followed by spaces or attributes. And fourth, it is reasonable to highlight
the symbols <code>&lt;</code>, <code>&lt;/</code>, <code>></code> differently
from the tag names inside them. So it is better to use rules of this form:</p>

<pre>start &lt; open Mark
start &lt;/ close Mark
...
open html attributes TagB
open body attributes TagB
...
close html spaces TagE
close body spaces TagE
...
</pre>

<p>The <code>attributes</code> and <code>spaces</code> states can be defined to
handle the remainder of each tag.</p>

<h2>Tests</h2>

<p>A language description can contain tests, which also act as examples
illustrating the operation of the rules. A line starting with <code>></code>
represents a line of source text. An immediately following line starting with
<code>&lt;</code> represents the output from the scanner. For example:</p>

<pre>&gt; (count + 1)
&lt; BI---- O VB
</pre>

<p>The output has the one-letter abbreviation for the type of each token, placed
under its first character. Characters of a token after the first are marked
with minus signs. Gaps are marked with spaces. The scanner state after scanning
the input line is used as the start state for the next test, which allows for
extended examples.</p>

<p>Bracket matching results in bracket tokens being marked with <code>b</code>
in stead of <code>B</code> if they are mismatched:</p>

<pre>&gt; (count + 1]
&lt; bI---- O Vb.
</pre>

<p>The tests are all carried out together, so that bracket matching in one test
can affect the results from a previous test.</p>

<pre>&gt; open (
&lt; I--- b
&gt; close ]
&lt; I---- b
</pre>

<p>If a test fails, a trace of execution of the scanner is shown.</p>

<!--

<h3>Bracket Matching</h3>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence:</p>

<pre>(...(...)
</pre>

<p>can be treated in either of these two ways:</p>

<pre class="match">(...<b>(</b>...)
<b>(</b>...(...)
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using <code>|</code> to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(...<b>(</b>.<u>|</u>.)
<b>(</b>.<u>|</u>.(...)
</pre>

<p>In both cases, the surplus bracket closest to the cursor is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match">   <i>/*...<b>/*</b>...*/</i>...<b>*/</b>..<u>|</u>
<u>|</u>..<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b></i><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b>...</i><u>|</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>|</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>|</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>|</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>|</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>|</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>
-->

</body>
</html>
