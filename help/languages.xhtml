<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<p><mark>Snipe</mark> has a scanner used to divide the text of a file being
edited into tokens, and to give each token a type. The scanner is table-driven,
using a language description from a text file. Further languages can be
supported by adding description files.</p>

<h2>Overview</h2>

<p>A scanner for an editor has different goals from those of a scanner in a
compiler. On the one hand:</p>

<ul>
<li>it may omit some details needed only for full compiling</li>
<li>it may accept some tokens that a compiler would reject</li>
<li>it may split or classify tokens differently</li>
<li>it may not need to be completely accurate</li>
</ul>

<p>On the other hand:</p>

<ul>
<li>it must include all characters, including comments, in
tokens</li>
<li>it must be able to handle any text, whether valid or not, and never
fail</li>
<li>it must produce token types which are suitable for syntax
highlighting</li>
</ul>

<p>In addition, the scanner for Snipe has some further specific features:</p>

<ul>
<li>it avoids re-scanning large quantities of text</li>
<li>it produces mini tokens within comments and literals</li>
<li>it supports word-based cursor movement and line wrapping</li>
<li>it helps with automatic indenting, bracket matching, semicolon insertion</li>
<li>it supports incremental algorithms</li>
</ul>

<p>In most editors, when a multi-line comment delimiter such as <code>/*</code>
is typed, it causes a large quantity of text to be re-scanned as a single big
comment token, possibly to the end of the file. Then, when the matching close
comment delimiter is typed, much of the text is re-scanned again, reversing the
effect. This is inefficient, which could lead to noticeable delays, and also
causes large changes on screen, which can be disconcerting.</p>

<p>To avoid this, and support an incremental approach in which small edits have
small effects, the Snipe scanner divides the text into smaller tokens than
usual. These small tokens then support word-based cursor movement and line
wrapping within comments or literals. Bracket matching techniques which take the
current cursor position into account are used to match up comment and literal
delimiters, and re-interpret the tokens between them. Auto indenting and other
features are similarly handled in an incremental fashion.</p>

<h2>Rules</h2>

<p>Language tokens are described by a plain text file. For example, the C
language is described by the <code>rules.txt</code> file in the directory
<code>snipe/languages/c</code>. The file is a description of a string-matching
state machine. A generic scanner uses the state machine to generate a tag byte
for every byte of text.</p>

<p>The format of language description files is fairly simple. A line which is
blank or begins with two symbol characters such as <code>//</code> is a comment
line which is ignored. Otherwise, a line represents a string matching rule, for
example:</p>

<pre>start == != start OP
</pre>

<p>A rule consists of a base state name, a list of pattern strings to match, a
target state name, and an optional tag. These are all separated by spaces. The
tag is often a token type. A state name must begin with a lower case letter. The
base state of the first rule in the description is the initial state of the
scanner.</p>

<p>When the scanner is in the base state of a rule and one of the strings in the
list is matched, the scanner moves past the matched string in the input, and
goes into the target state. If there is a tag representing a token type, the
token is terminated after the matched characters and given that type. If there
is no tag, scanning of the current token is continued.</p>

<p>With the above rule, if the scanner is in the <code>start</code> state and
either of the equality operators <code>==</code> or <code>!=</code> appears
next, then the scanner moves past the operator, gives it the token type
<code>OP</code>, and remains in the <code>start</code> state.</p>

<p>A pattern string in a rule is plain text. There are no quoting conventions. A
pattern must be non-empty and may not contain spaces, newlines, control
characters, or non-ASCII characters. Although non-ASCII characters cannot be
explicitly matched, they are accepted in the text being scanned, and are
implicitly treated the same as letters. This covers most common cases where such
characters are allowed by programming languages, in comments, strings or
identifiers. Spaces and newlines cannot be matched explicitly or included in
tokens. but are handled automatically by the scanner, which tags a space as a
gap between tokens, and a newline as a one-character token.</p>

<p>As an abbreviation, if a pattern string consists of two characters separated
by two dots, it represents a range of one-character strings, e.g.
<code>0..9</code> stands for <code>0 1 2 3 4 5 6 7 8 9</code>. For example:</p>

<pre>start 0..9 number
</pre>

<p>This rule says that if the scanner is in the <code>start</code> state, and a
digit appears next in the input, the scanner matches the digit and goes into the
<code>number</code> state. There is no tag attached to the rule, so the current
token is not terminated, and scanning of the token continues.</p>

<p>A tag may be a token type which is a name starting with an upper case letter.
Any names can be used, but only the first letter is significant, and it is only
used to determine syntax highlighting. Typical names might be:</p>

<pre>FUNCTION ID KEY OP PROPERTY RESERVED SIGN TYPE VALUE
</pre>

<p>Alternatively, a tag may be a symbol consisting of a single printable but
non-alphanumeric ASCII character. The symbols and their meanings are:</p>

<pre>(   Open level 0 bracket
)   Close level 0 bracket
[   Open level 1 bracket
]   Close level 1 bracket
{   Open level 2 bracket
}   Close level 2 bracket
&lt;   Open level 3 bracket
>   Close level 3 bracket
#   Start of one-line comment, e.g. # or //
/   Start of multiline comment (non-nesting), e.g. /*
\   End of multiline comment (non-nesting), e.g. */
^   Start of multiline comment (nesting), e.g. {-
$   End of multiline comment (nesting), e.g. -}
*   Token inside (any kind of) comment
'   Single quote delimiter
"   Double quote delimiter
@   Multiline quote delimiter, e.g. """
=   Token inside (any kind of) quotes
:   Label indicator (affects indenting)
?   Invalid, incomplete, mismatched or unwise token
-   Continue the same token
</pre>

<p>Each symbol other than the last indicates a token type which has some further
significance in Snipe as well as syntax highlighting, e.g. for bracket or
delimiter matching or indenting. The minus sign symbol explicitly indicates that
the current token is to be continued, and is the default if a rule has no tag.</p>

<p>There are further symbols used internally and automatically by the scanner as
tags for spaces, newlines, and bytes which continue a character. Examples of
using symbols as token types are:</p>

<pre>escape n start ?

filename > start =

start 0..9 number -
</pre>

<p>The <code>escape</code> state might be used to mark an escape sequence such
as <code>\n</code> as an error token, in case it is not inside quotes. If it is
inside quotes, then later delimiter matching will override the type as
<code>=</code> to indicate that it should be highlighted as quoted text. The
<code>filename</code> rule might be used to recognise the end of an inclusion
filename in the C language between angle quotes as a token, and give it the type
<code>=</code> to indicate that it should be highlighted as if it were a normal
quoted string. The third rule is an alternative way of saying that if a digit is
matched, the <code>number</code> state is used to scan the rest of the token,
using an explicit minus sign instead of having no tag.</p>

<p>There may be multiple rules for the same state. If a string mentioned in any
one of the rules matches, that rule is applied. For example:</p>

<pre>start == != start OP
start a..z A..Z id
</pre>

<p>In the <code>start</code> state, if an equality operator appears next in the
input, it is marked with type <code>OP</code>. If a letter appears, the scanner
moves to the <code>id</code> state.</p>

<p>If two different strings match at one position in the input, the longer
string takes precedence. For example:</p>

<pre>start = start SIGN
start == != start OP
</pre>

<p>If there are two equal signs next in the input, the second rule applies, not
the first. If there is only a single equal sign, the first rule applies.</p>

<p>If the same string is mentioned in multiple rules, the earlier rule takes
precedence. Thus later rules act as defaults. For example:</p>

<pre>filename > start =
filename !..~ filename
</pre>

<p>These rules say that, while recognizing a filename in <code>&lt;...></code>
brackets as a single token, a <code>></code> character terminates the token,
even though the <code>></code> is also matched by the second rule.</p>

<p>A limited form of lookahead is provided. A lookahead rule has a token type at
the beginning of the line, before the base state. For example:</p>

<pre>FUNCTION id ( start
</pre>

<p>This rule says that, in state <code>id</code>, if an open bracket appears
next in the input text, the current token at this point is terminated and given
type <code>FUNCTION</code>, without including the bracket. The scanner then goes
to the <code>start</code> state to deal with the bracket. There may be spaces
between the current token and the bracket, so this is effectively a lookahead to
the next token.</p>

<p>A lookahead rule can be a continuation. For example:</p>

<pre>- start . start2
</pre>

<p>This says that in the <code>start</code> state, if a dot occurs next in the
input, it is not immediately included in the current token. The target state
<code>start2</code> is responsible for handling the dot. The minus sign symbol
cannot be omitted in this case, as it indicates a lookahead rule rather than a
normal one.</p>

<p>A rule may have no patterns, in which case it is a default rule to indicate
what happens in any situation which has not yet been handled. For example:</p>

<pre>id start ID
</pre>

<p>This can be thought of as matching the empty string. It can equally be
thought of as looking ahead for the empty string, so the tag can be at either
end of the rule:</p>

<pre>ID id start
</pre>

<p>Either version of the rule ensures that if an identifier is not followed by
anything handled in previous rules, it is given the type <code>ID</code>. The
rule applies to all printable characters, as if explicitly written as a
lookahead rule:</p>

<pre>ID id !..~ start
</pre>

<p>However, the default rule additionally specifies what happens if the token is
followed by optional spaces and a newline.</p>

<p>Since a token is not marked until the end of the token is reached, decisions
about which type to use can be delayed. For example, rules like these can be
used for a language where an identifier is allowed to start with a keyword:</p>

<pre>start a..z A..Z id
start if else for while key

key a..z A..Z 0..9 id
key start KEY

id a..z A..Z 0..9 id
id start ID
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. Since
<code>for</code> is longer than the single letter <code>f</code>, the second
rule for the <code>start</code> state applies rather than the first and the
scanner goes to the <code>key</code> state which gives the token the type
<code>KEY</code>.</p>

<p>Suppose instead that the identifier <code>form</code> appears next in the
input. The prefix <code>for</code> is matched and the scanner goes into the
<code>key</code> state. Then the <code>m</code> is matched and the scanner goes
into the <code>id</code> state and the token ends up being given type
<code>ID</code>.</p>

<p>If a default rule has no tag (or has a minus sign at either end), it is
effectively an unconditional jump to another state. For example:</p>

<pre>inclusion &lt; filename
inclusion start
</pre>

<p>These rules handle a filename in angle brackets in the special context of a
file inclusion. The first rule matches the open angle bracket and goes to the
<code>filename</code> state to match the rest of the filename. The default rule
says that if anything else appears next in the input, the scanner reverts to the
<code>start</code> state to handle it.</p>

<p>A lookahead or default rule with no token type makes no immediate progress,
so there is a check that in any situation where the default rule is reached, the
target state will, eventually, accept the next character.</p>

<p>Every state is either a starting state, which the scanner can be in between
tokens, or a continuing state, where there is a non-empty current token. Checks
are made to ensure that each state is treated consistently as one or the other.
The starting states are the initial state, and any state which appears as a
target in a rule which has a token type. For example:</p>

<pre>start # hash KEY
</pre>

<p>This rule might be used in the C language, to recognise
<code>#include</code>. After the <code>#</code> token and optional spaces,
<code>include</code> is a keyword rather than an identifier. The
<code>hash</code> state is a starting state for recognising such keywords only
in this limited context. Another example is:</p>

<pre>html &lt;% java &lt;

java %> html >
</pre>

<p>These rules might be used in a language such as <code>JSP</code> where html
text can contain Java code between <code>&lt;%</code> and <code>%></code>
brackets. The <code>html</code> and <code>java</code> states are starting states
which recognize each of the two sublanguages.</p>

<p>Inconsistency between starting and continuing states can cause an error
message. For example:</p>

<pre>dot 0..9 number
SIGN dot a..z A..Z prop

prop a..z A..Z 0..9 prop
prop start PROPERTY
</pre>

<p>The idea behind these rules is that if a dot is followed by an identifier,
the identifier should be highlighted differently, as a <code>PROPERTY</code>.
Since the <code>dot</code> state checks by lookahead for the first letter, it
seems harmless for the first <code>prop</code> rule to include digits. However,
these rules would cause an error message. That is because the <code>prop</code>
state is determined to be a starting state, because it follows the termination
of a <code>SIGN</code> token in the second <code>dot</code> rule. On the other
hand, it appears to be a continuing state, both because it is the target of
its first rule, a continuation rule, and because it terminates a
<code>PROPERTY</code> token in its second rule. This can be corrected by
writing:</p>

<pre>dot 0..9 number
SIGN dot a..z A..Z prop

prop a..z A..Z prop2
prop start

prop2 a..z A..Z 0..9 prop2
prop2 start PROPERTY
</pre>

<p>Now, <code>prop</code> is a starting state which matches only the first
letter, and <code>prop2</code> is a continuing state which recognizes the rest
of the token.</p>

<p>The default behaviour for a starting state, for any situation not explicitly
handled, is to accept the next character as a one-character error token and stay
in the same state, as if a default rule were added of this form:</p>

<pre>start !..~ start ?
</pre>

<p>Spaces and newlines are handled similarly and automatically, by accepting and
tagging them suitably, though this can't be expressed explicitly.</p>

<p>The default behaviour for a continuing state <code>s</code>, say,
for any situation not explicitly handled, is to terminate the current token as
an error token and go into the initial state, as if a default rule was added of
the form:</p>

<pre>? s start
</pre>

<p>This applies to spaces and newlines as well as to printable characters. If
there is an explicit default rule for a state such as:</p>

<pre>ID id start
</pre>

<p>then this apples to spaces and newlines as well, ensuring that the current
token gets type <code>ID</code> in all cases.</p>

<p>In awkward cases, it may be necessary to choose an imperfect compromise. Take
a file inclusion string <code>&lt;stdio.h></code> in C for example. Technically,
the C language allows the filename string to contain spaces, but that would
involve awkward language-dependent handling during later delimiter matching,
since <code>&lt;</code> and <code>></code> are not uniformly treated as string
quotes in the C language. To avoid that, the rules for the C language could
include these:</p>

<pre>filename &gt; start =
filename !..~ filename
? filename start
</pre>

<p>This treats <code>&lt;stdio.h&gt;</code> as a single token, without spaces,
of type <code>=</code> to indicate quoted text, or <code>?</code> to indicate an
incomplete token. A file path containing spaces in this context is vanishingly
rare, and the only consequence is incorrect syntax highlighting on one line, so
the imperfection seems acceptable.</p>

<p>A language description in <code>rules.txt</code> can be compiled into a table
using <code>compile.c</code> in <code>snipe/languages</code> and then executed
using <code>interpret.c</code>, independently of the rest of Snipe. The
interpreter carries out tests in a file <code>tests.txt</code>. Each test
consists of optional comment lines starting with <code>#</code>, followed by a
line of text, followed by a line of tags generated by the scanner. For
example:</p>

<pre># Check brackets
struct *point = { x, (y+1) }; int ns = [(n+2),3];
K-----_SI----_S_{_IS_(ION)_}S_K--_I-_S_[(ION)SN]S.
</pre>

<p>Thus the type of a token may be affected by the next token, but no more than
that. To scan incrementally in the editor, when a token is altered, the editor
needs to go back at least as far as the beginning of the previous token before
the changed one, and find what state the scanner was in at that point, to start
re-scanning.</p>

<h3>Scanner operation</h3>

<p>The current state of the scanner can be recorded now and then, e.g. at the
start of each line of the text. Then, when some text changes while editing,
re-scanning of the changed text need begin no earlier than at the start of the
affected line. Re-scanning would then continue until synchronisation, i.e. until
the current state of the scanner at the start of a line matches the previous
state recorded at that point. It is desirable that this synchronisation should
happen after only a line or two, to avoid visual instability for the user as
well as inefficiency in the editor. Scanning is then effectively
incremental.</p>

<p>The first state to be defined in a language description is the default one
for the scanner to start in. It is normal for most tokens to be scanned starting
from that first state, with other states being defined to handle progression
through each token. In that case, re-scanning is sure to be brief. However,
alternative start states for tokens can be used to handle unusual
situations.</p>


<h3>Example: reinterpretation</h3>

<p>In C or a similar language, the text <code>"*/"//"</code> would be
scanned as something like:</p>

<pre>" QUOTE */ COMMENT " QUOTE // COMMENT " QUOTE
</pre>

<p>After scanning, if there is no multiline comment in progress at the start of
the sequence, the first two quotes are matched, the one-line comment delimiter
is matched with the end of the line, and the sequence is temporarily adjusted
to:</p>

<pre>" QUOTE */ QUOTE " QUOTE // COMMENT " COMMENT
</pre>

<p>On the other hand, if a multiline comment is in progress, it ends at the
<code>*/</code> delimiter, the last two quotes are matched, and the phrase is
instead temporarily adjusted to:</p>

<pre>" COMMENT */ COMMENT " QUOTE // QUOTE " QUOTE
</pre>

<p>If bracket matching is incremental as well as scanning, then these
readjustments can also be incremental, and the whole process need not be very
expensive.</p>

<h2>Matching</h2>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>TODO: explain delimiters. Not same because (a) they are usually not nested
and (b) they may be limited to one line (c) open and close may be the same or
there may not be an explicit closer and (d) they affect the highlighting of the
tokens in between. Nested comments same as brackets, non-nested comments more
interesting. When inside a comment, an open comment delimiter is always the top
opener on the unmatched stack. Ordinary tokens are included in algorithm, and
have their highlighting overridden as you go past them, according to the top
opener, but they don't end up on either stack. Unnested algorithm described
below. Multiline literal (often """) similar, also unnested (can't nest if start
and end delimiter are the same). Describe quotes and forward and backward.
Describe one-line comment (memo). Must wait until found and then re-mark to end
of line - not purely local but not bad.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence <code>(()</code> can be treated in
either of these two ways:</p>

<pre class="match">(<b>(</b>)
<b>(</b>()
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using three dots to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(<b>(</b><u>...</u>)
<b>(</b><u>...</u>()
</pre>

<p>In the first case, there are two surplus brackets before the cursor and one
after, and the outermost two are matched. In the second case, there are no
surplus brackets after the cursor, so the leftmost bracket is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match"><i>/*...<b>/*</b>...*/</i>...<b>*/</b>
<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b></i><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b>...</i><u>:</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>:</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>:</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>:</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>:</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>:</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>

<!--




<p>The token types are:</p>

<pre>BAD
COMMENT  (0=/*, 1=*/, 2, 3)
ESCAPE sequence
HANDLE (colon)
IDENTIFIER (0,1,2,3,4 for normal, function, property, method, constant)
KEYWORD (0,1 for alternative highlighting, e.g. reserved)
LEFT (0,1,2)
LINE
MEMO  (//)
NUMBER
OP
PARAGRAPH (e.g. """)
RIGHT (3,4,5)
QUOTE (0,1 for " ')
SIGN (symbol e.g. = , ;)
TYPE
WORD

order: LINE, BAD, MEMO, QUOTE first.
important for bracketing: LINE BAD MEMO QUOTE BRACKET COMMENT
</pre>

<p>All actions other than accept terminate the current token with a type. Upper
case letters are used to mark tokens which only affect syntax highlighting via
theme files. Non-letter symbols are used to mark tokens which have some
syntactic significance which potentially affects bracketing, indenting,
continuation, wrapping etc. Bracket matching in the editor deals with such
things as delimiting comments and quoted literals, terminating one-line comments
at newlines, or marking a close curly bracket as belonging to an initializer
(which affects the handling of semicolons). That means, for example, that a
newline should be marked with <code>$</code> so that the bracket matcher can
detect the end of a one-line comment.</p>

<p>A language description file has tests at the end, after a line of at least
five minus signs. Each test consists of two lines of text. Tests may be
separated by blank lines. The first line of a test consists of some program text
in the language being described. The second line shows the token types generated
by the scanner. The first character of a token is marked with its type, and the
remaining characters of a token are marked with spaces.</p>

<p>The scanner is made incremental by generating tags which encode both the
token type and the state which the scanner is in after the token. A token cannot
be affected by anything further ahead than the following character. So, after an
edit, rescanning can be started at the nearest token boundary before the edit
point, and stopped as soon as a token after any changed text is given the same
tag as before the edit.</p>

-->

</body>
</html>
