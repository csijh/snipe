<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<p><mark>Snipe</mark> has a scanner, which is implemented as a string-matching
state machine, to divide the text of a file being edited into tokens, and to
give each token a type. A scanner for an editor has different goals from those
of a scanner in a compiler. On the one hand the scanner:</p>

<ul>
<li>may omit some details needed only for full compiling</li>
<li>may accept some tokens that a compiler would reject</li>
<li>may split or classify tokens differently</li>
<li>may be approximate</li>
</ul>

<p>One common reason for a scanner to be approximate is that the lexical rules
for a language depend on syntactic context. A multi-language editor doesn't
normally support full parsing of languages. Another common reason is that a
language allows multi-line comments to nest. A state machine can't model
unlimited nesting, but can implement nesting to a small fixed maximum level. On
the other hand, the scanner:</p>

<ul>
<li>must include all characters, including comments, in tokens</li>
<li>must be able to handle any text, whether valid or not</li>
<li>must produce token types suitable for syntax highlighting</li>
</ul>

<p>In addition, the scanner for Snipe is designed to be able to support other
editor features such as:</p>

<ul>
<li>dynamic loading of language definitions</li>
<li>incremental rescanning</li>
<li>cursor movement a 'word' at a time</li>
<li>bracket matching</li>
<li>line wrapping</li>
<li>indenting</li>
<li>semicolon insertion</li>
</ul>

<p>Scanners for multi-language editors are often expressed using regular
expressions. Scanners for Snipe are instead expressed as state machine tables.
These are simpler, easier to read and maintain, and only a little less
compact. Each language has a description in a text file, which is compiled into
a table in a binary file. These binary files can then be loaded dynamically as
necessary by Snipe.</p>

<p>A language scanner is described by a plain text file. For example, the C
language is described by the <code>scanner.txt</code> file in the directory
<code>snipe/languages/c</code>. The file is a description of a string-matching
state machine. A generic interpreter uses the state machine to perform
scanning.</p>

<h2>Rules</h2>

<p>A language description file is a plain UTF-8 text file. A line which is blank
or begins with a non-letter such as <code>#</code> or <code>/</code> is a
comment line which is ignored. Otherwise, a line represents a string-matching
rule.</p>

<p>A simple rule has a base state name, a list of patterns to match, a target
state name, and a token type, all separated by spaces. A state name begins with
a lower case letter. A pattern is a sequence of non-space characters. A token
type starts with an upper case letter or a non-letter. For example:</p>

<pre>start == != start OP
</pre>

<p>When the scanner is in the base state of a rule and one of the patterns in
the list appears next in the input, the scanner moves past the matched
characters, and goes into the target state. The current token is terminated
after the matched characters and given that type. With the above rule, if the
scanner is in the <code>start</code> state and either of the equality operators
<code>==</code> or <code>!=</code> appears next in the input, then the scanner
moves past the operator, gives it the token type <code>OP</code>, and remains in
the <code>start</code> state.</p>

<p>A rule need not include a token type, in which case scanning of the current
token is continued. In the following example, when in the <code>start</code>
state, if a double quote character appears next in the input, the scanner moves
past it and goes into the <code>string</code> state to deal with the rest of the
token:</p>

<pre>start " string
</pre>

<p>A limited form of lookahead is provided. A lookahead rule has a plus sign
character at the end. For example:</p>

<pre>id ( start FUNCTION +
</pre>

<p>This rule says that in the <code>id</code> state, if an open bracket appears
next in the input text, the current token at this point is terminated and given
type <code>FUNCTION</code>, without including the bracket. The scanner then goes
into the <code>start</code> state to deal with the bracket.</p>

<p>A lookahead rule need not terminate the current token, i.e. it need not have
a token type. For example:</p>

<pre>start \ escape +
</pre>

<p>This says that in the <code>start</code> state, if a backslash occurs next in
the input, it is not immediately included in the current token. The scanner goes
into the target state <code>escape</code>, which is responsible for handling the
backslash.</p>

<p>A pattern in a rule must be non-empty and may not contain spaces, newlines,
or control characters. These can be represented using an escape mechanism. A
backslash followed by one or more digits represents the decimal code for a
character. For example, <code>\10</code> represents a newline and
<code>\32</code> represents a space:</p>

<pre>start \10 start NEWLINE
start \32 start GAP
</pre>

<p>A backslash that is not followed by a digit has no special meaning - it
stands for itself. A pattern consisting of two dots with a character on either
side represents a range of one-character patterns, e.g. <code>0..9</code> stands
for <code>0 1 2 3 4 5 6 7 8 9</code>:</p>

<pre>start 0..9 number
</pre>

<p>This rule says that if the scanner is in the <code>start</code> state, and a
digit appears next in the input, the scanner matches the digit and goes into the
<code>number</code> state. There is no token type, so the current token is not
terminated, and scanning of the token continues in the <code>number</code>
state, after the matched digit.</p>

<p>If the first character, before the two dots, is missing, it is taken to be
<code>\0</code> and if the final character is missing, it is taken to be
<code>\1114111</code>. For example:</p>

<pre>start ..\31 \127 control
start a..z A..Z \128.. id
</pre>

<p>The first rule says that if any ASCII character outside the printable range
(<code>' '</code> to <code>~</code>) is found, it is accepted and the scanner
enters the <code>control</code> state.  The second rule specifies that an id
starts with a letter or with any non-ASCII Unicode character. In fact, a
reasonable approximate approach to Unicode in any language definition is to
allow any non-ASCII character wherever a letter is allowed. This covers most
common cases where such characters are allowed by programming languages, e.g. in
identifiers, string literals or comments.</p>

<p>A pattern consisting of just two dots, i.e. with both characters missing,
represents any single character, which is useful for expressing default rules.
For example:</p>

<pre>start .. start ERROR

id .. start ID +
</pre>

<p>The first rule says that in the start state, any character not already dealt
with forms a one-character error token. The second says that if any character
not already dealt with is encountered while scanning an id, the id should be
terminated before that character, and the start state entered to deal with
it.</p>

<p>If a lookahead rule with no patterns has no token type, it is effectively an
unconditional jump to another state. For example,</p>

<pre>directive .. start +
</pre>

<p>The <code>directive</code> state might be used to recognise a special
sequence of tokens. This rule says that if anything further appears in the
input, the scanner reverts to the <code>start</code> state to handle it.</p>

<p>If, for example, there is a need to match two dots explicitly in the text,
the matching can be done in two steps using an extra state. For example:</p>

<pre>start . dot
dot . dots
</pre>

<p>The first rule recognises a dot, and the second rule recognises a following
dot.</p>

<h2>States</h2>

<p>A state is defined by the rules which have that state as their base state.
The rules defining a state don't have to be contiguous. For example, all the
rules relevant to each type of token may be gathered together, even though that
means the rules for the <code>start</code> state are scattered:</p>

<pre># One line comments
start // note
note \10 start COMMENT
note note

# Multi-line comments
start /* comment
comment */ start COMMENT
...
</pre>

<p>If the input matches a pattern mentioned in any one of the rules for a state,
that rule is applied. In the following example, in the <code>start</code> state,
if an equality operator appears next in the input, it is marked with type
<code>OP</code>, whereas if a letter appears, the scanner goes into the
<code>id</code> state:</p>

<pre>start == != start OP
start a..z A..Z id
</pre>

<p>If two different patterns match at one position in the input, the longer
pattern takes precedence. In this example, if there are two equal signs next in
the input, the second rule applies, not the first. If there is only a single
equal sign, the first rule applies:</p>

<pre>start = start SIGN
start == != start OP
</pre>

<p>If the same pattern is matched by multiple rules, the earlier rule takes
precedence. Thus later rules act as defaults and, even though the rules for a
state need not be contiguous, the order in which they appear in the description
file may matter. For example:</p>

<pre>string " start QUOTE
string .. string
</pre>

<p>These rules say that, while recognizing a string literal in double quotes, a
double quote character terminates the token, even though the double quote
character is also matched by the second rule, which acts as a default, matching
and accepting any character other than a double quote.</p>

<p>Since a token is not given a type until the end of the token is reached,
decisions about which type to use can be delayed. For example, rules like these
can be used for a language where an identifier is allowed to start with a
keyword:</p>

<pre>start a..z A..Z id
start if else for while key

key a..z A..Z 0..9 id
key .. start KEY

id a..z A..Z 0..9 id
id .. start ID
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. Since
<code>for</code> is longer than the single letter <code>f</code>, the second
rule for the <code>start</code> state applies rather than the first and the
scanner goes to the <code>key</code> state which gives the token the type
<code>KEY</code>.</p>

<p>Suppose instead that the identifier <code>form</code> appears next in the
input. The prefix <code>for</code> is matched and the scanner goes into the
<code>key</code> state. Then the <code>m</code> is matched and the scanner goes
into the <code>id</code> state and the token ends up being given type
<code>ID</code>.</p>

<h2>Correctness checks</h2>

<p>When a language description is processed, various checks are made for correct
behaviour. The checks ensure that the scanner never fails, creates non-empty
tokens, partitions the input by including every character in a token, handles
all possible inputs, terminates without getting stuck in a loop, and supports
incremental re-scanning.</p>

<p>Every target state mentioned in the rules must be a defined state, i.e. one
which appears as the base state of at least one rule.</p>

<p>Every state must handle all possible inputs. A check is made that each
possible single character which could appear next in the input is mentioned in
the state's rules. The easiest way to ensure that is for each state to have a
final default rule using <code>..</code> which handles all cases not covered in
the previous rules. For example, a state for identifiers might have a default
rule which says that if anything other than a letter or digit appears next in
the input, the token is terminated:</p>

<pre>id a..z A..Z 0..9 id
id .. start ID +
</pre>

<p>Every state is classified either as a <dfn>starting</dfn> state, which the
scanner is in when between tokens, or a <dfn>continuing</dfn> state, which the
scanner is in when within a token. A check is made to ensure that each state is
consistently treated as one or the other. This helps to ensure that the scanner
partitions the whole of the input text into non-empty tokens.</p>

<p>The base state of the first rule in the description is the initial state of
the scanner, so it is a starting state. Any state which appears as the target in
a rule with a token type must also be a starting state. For example:</p>

<pre>start # hash SIGN
</pre>

<p>This rule might be used in the C language, to recognise preprocessor
directives such as <code>#include</code>. After the <code>#</code> token,
<code>include</code> is a keyword rather than an identifier. The
<code>hash</code> state is a starting state for recognising such keywords only
in this limited context. Another example is:</p>

<pre>html &lt;% java SIGN
java %> html SIGN
</pre>

<p>These rules might be used in a language such as <code>JSP</code> where html
text can contain Java program fragments between <code>&lt;%</code> and
<code>%></code> brackets. The <code>html</code> and <code>java</code> states are
starting states which recognize each of the two sublanguages.</p>

<p>If a state is the target of a non-lookahead rule which has no token type,
then it is a continuing state. For example, the <code>id</code> state must
be a continuing state if it contains the rule:</p>

<pre>start a..z A..Z id
</pre>

<p>Also, if a state is the base of a lookahead rule with a token type, it must
be a continuing state, otherwise it would be creating an empty token. For
example, the <code>id</code> state must be a continuing state if it contains the
rule:</p>

<pre>id .. start ID +
</pre>

<p>Once each state has been classified as a starting or continuing state, a
further check is made that a lookahead rule with no token type has base and
target states which are both starting states or both continuing states. For
example, <code>directive</code> and <code>start</code> are deduced to have the
same classification if the scanner includes this rule, which is effectively a
jump:</p>

<pre>directive .. start +
</pre>

<p>An example where an error arises because states are not handled consistently
might be:</p>

<pre>dot 0..9 number
dot a..z A..Z prop SIGN +
dot .. start +

prop a..z A..Z 0..9 prop
prop .. start PROPERTY +
</pre>

<p>The idea behind these rules is that if a dot is followed by an identifier,
the identifier should be highlighted differently, as a <code>PROPERTY</code>.
However, the <code>prop</code> state is classified as a starting state, because
it follows the completion of a <code>SIGN</code> token in the second
<code>dot</code> rule. On the other hand, it has to be a continuing state,
both because it is the target of its own first rule, and because it completes a
<code>PROPERTY</code> token in its second rule. This can be corrected by
writing:</p>

<pre>dot 0..9 number
dot .. propStart SIGN +

propStart a..z A..Z prop
propStart .. start +

prop a..z A..Z 0..9 prop
prop .. start PROPERTY +
</pre>

<p>Now, <code>prop</code> is a starting state which matches only the first
letter, and <code>prop2</code> is a continuing state which recognizes the rest
of the token.</p>

<p>A lookahead rule makes no progress in the input, so there is a check that
there is no cycle of lookahead rules which could result in an infinite loop when
scanning. For example:</p>

<pre>even a..z odd +
odd a..z even +
</pre>

<p>These rules would cause the scanner to continue indefinitely if a letter
appeared next in the input.</p>

<p>Finally, there is a check that a newline character <code>\10</code> never
appears in a token or a lookahead pattern anywhere other than at the end.
Examples might be:</p>

<pre>start \10\32 indent

comment \10 comment

id \10( start FUN +
</pre>

<p>This ensures that the scanner state can be stored immediately after each
newline is dealt with, to allow scanning to be re-started at the beginning of
the following line. The <code>start</code> rule would mean that the scanner
could be in the middle of matching a pattern rather than in a specific state
just after matching a newline. The <code>comment</code> rule would result in a
newline which wasn't at the end of a token, i.e. the next line would start
inside a token. The <code>id</code> rule would mean that lookahead characters on
the next line could affect scanning, and therefore the scan state at the start
of a line could depend on some of the characters in that line.</p>

<h2>Conventions</h2>

<p>The Snipe scanner does not just give each token a type for syntax
highlighting purposes. It also supports further editor features, and some
conventions are needed for this to work.</p>

<p>To ease the writing of tests and the handling of some extra features, each
token type can be abbreviated to its first character, so the first characters
need to be unique. For example, the type names might be:</p>

<p class="indent"><code>(BRACKET )BRACKET [BRACKET ]BRACKET {BRACKET }BRACKET
&lt;BRACKET >BRACKET COMMENT ERROR FUNCTION GAP ID KEY NEWLINE OP
PROPERTY QUOTE RESERVED SIGN TYPE VALUE</code></p>

<p>To handle automatic bracket matching, brackets should be given types starting
with <code>( ) [ ] { } &lt; ></code>, which represent brackets in order of
increasing priority. For a curly bracket language, brackets might be handled
like this:</p>

<pre>start ( start (BRACKET
start ) start )BRACKET
start [ start [BRACKET
start ] start ]BRACKET
start { start {BRACKET
start } start }BRACKET
</pre>

<p>In a language where keywords <code>begin</code> and <code>end</code> are used
for blocks instead of curly brackets, the last two rules might be replaced
by:</p>

<pre>start begin start {BRACKET
start end start }BRACKET
</pre>

<p>If a bracket is not active, i.e. it is inside a comment or string literal, it
should have, or be part of a token with, some other type such as
<code>COMMENT</code> or <code>QUOTE</code>.</p>

<p>----------</p>



<p>To handle automatic indenting, a newline should only be given the token type
<code>NEWLINE</code> if it is 'active', i.e. not included in a comment or quote,
so that the immediately following line is one that should be indented:</p>

<pre>start \10 start NEWLINE
</pre>

<p>Brackets which are inactive, because they are in comments or quoted literals,
should have other token types such as <code>COMMENT</code> or
<code>QUOTE</code>.</p>

<p>For the scanner to support commands that move the cursor a 'word' at a time,
a long comment or quoted literal should be divided into mini-tokens. Each
newline, or sequence of one or more spaces, should be treated as a token in its
own right. For example, a multi-line comment might be dealt with like this:</p>

<pre>start /* comment
comment \32 \10 commentGap COMMENT +
comment */ start COMMENT
comment .. comment
commentGap .. comment COMMENT
</pre>

<p>In these rules, a space or a newline is marked as a separate token, so that
the editor can recognise it and skip past it when moving a 'word' at a time. A
newline is marked as a <code>COMMENT</code> token rather than as a
<code>NEWLINE</code> token, to indicate to the editor that the newline is not
active, i.e. automatic indenting rules do not apply to the following line.</p>

<p>----------</p>


<p>Each of these can be abbreviated unambiguously to its first character, except
for the bracket types which can be abbreviated to their suffix digit.</p>

<p>A typical test might appear something like this:</p>

<pre>struct *point = { x, (y+1) }; int ns = [(n+2),3];
K.....GSI....GSG4GISG0IOV1G5SGK..GI.GSG20IOV1SV3S
</pre>

<p>The first line represents some input text, and the line below represents the
result of scanning. The first character of each token is marked below by the
one-character abbreviation of its token type, and the remaining characters of a
token are marked by dots.</p>

<h2>Compiling...</h2>







<p>A language description in <code>tokens.txt</code> can be compiled into a
table using <code>compile.c</code> in <code>snipe/languages</code> and then
executed for testing using <code>interpret.c</code>. The interpreter carries out
tests in a file <code>tests.txt</code>. Each test consists of optional comment
lines starting with <code>#</code>, followed by a line of text, followed by a
line of tags generated by the scanner. For example:</p>

<p>Thus the type of a token may be affected by the next token, but no more than
that. To scan incrementally in the editor, when a token is altered, the editor
needs to go back at least as far as the beginning of the previous token before
the changed one, and find what state the scanner was in at that point, to start
re-scanning.</p>

<h3>Scanner operation</h3>

<p>The current state of the scanner can be recorded now and then, e.g. at the
start of each line of the text. Then, when some text changes while editing,
re-scanning of the changed text need begin no earlier than at the start of the
affected line. Re-scanning would then continue until synchronisation, i.e. until
the current state of the scanner at the start of a line matches the previous
state recorded at that point. It is desirable that this synchronisation should
happen after only a line or two, to avoid visual instability for the user as
well as inefficiency in the editor. Scanning is then effectively
incremental.</p>

<p>The first state to be defined in a language description is the default one
for the scanner to start in. It is normal for most tokens to be scanned starting
from that first state, with other states being defined to handle progression
through each token. In that case, re-scanning is sure to be brief. However,
alternative start states for tokens can be used to handle unusual
situations.</p>


<h2>Matching</h2>

<!-- Best approach for compactness: allocate 256 values 'dynamically' to both
"tag x overridden with tag y" pairs, and "scanner starting state x overridden
with space tag" and even "original indent x overridden with newline". Can we
work out from language definition whether we will run out? -->

<p>The way in which brackets and delimiters are matched for a language is
defined in a file <code>match.txt</code> in the language directory. A blank line
or a line starting with one or two symbols (e.g. <code>#</code> or
<code>//</code>) is a comment line. Each rule in the file begins with a
two-letter upper case keyword followed by triples of symbol tags, for
example:</p>

<pre>EQ (-) [-] {-} '=' "=" /*. &lt;*>
</pre>

<p>The first and third symbols in a triple are token type tags, as allocated in
the <code>tokens.txt</code> file. The first is an opener, i.e. the token type of
an opening bracket or delimiter, and the third is a closer. The middle symbol is
an operator such as a comparison which specifies what happens when the opener
and closer meet during matching. The <code>=</code> symbol indicates that the
opener and closer match. A rule with a minus sign as a tag (or no tag) specifies
that the openers and closers are brackets, and the token types of the tokens
between matching brackets remain unchanged. A rule may also deal with
mismatches:</p>

<pre>LT (?] [?}
</pre>

<p>This establishes a precedence between the brackets when they don't match, and
the token type given to any mismatched brackets. The triple <code>(&lt;]</code>
means that when <code>(</code> is the most recent open bracket and
<code>]</code> is the next close bracket, then the <code>(</code> is marked with
type <code>?</code> and subsequently ignored. Implicit further comparisons are
automatically deduced from the ones given, in this case:</p>

<pre>LT (?}
GT [?) {?) {?]
</pre>

<p>A suitable rules for quotes would be:</p>

<pre>EQ '=' "="
</pre>

<p>This establishes which quotes match, and specifies that the type
<code>=</code> (quoted text) overrides the original types of the quotes and the
tokens between them. A further rule might be:</p>

<pre>MM '?. "?.
</pre>

<p>This rule specifies that the quotes are on one line. The dot is the token
type of a newline, and <code>'?.</code> means that the opening quote and the
newline 'match'. Using <code>MM</code> instead of <code>EQ</code> means that a
different token type than the normal one for the opener can be used, in this
case the quoted text is tagged as an error.</p>

<p>Comments might be specified using:</p>

<pre>EQ #*. &lt;*>
</pre>

<p>This says that a one-line comment, where the opening delimiter has been
tagged with type <code>#</code>, is matched by the next newline and that all the
tokens making up the comment have their types overridden with <code>*</code>
(commented text). Assuming that multi-line comment delimiters have been given
types <code>&lt;</code> and <code>></code>, the triple <code>&lt;=></code> makes
them match.</p>

<p>In some languages multi-line comments nest, but in many others they don't. To
specify that multi-line comments nest, a rule like this can be used:</p>

<pre>PL &lt;*&lt; >*>
</pre>

<p>The PL operation refers to two openers or two closers to indicate that one
pair is allowed inside another. In the forward matching algorithm, the triple
<code>&lt;*&lt;</code> indicates that when <code>&lt;</code> is on the stack of
unmatched openers, and a further <code>&lt;</code> is encountered, it is pushed
onto the stack. To specify instead that multi-line comments are non-nesting,
rules like this can be used:</p>

<pre>GT &lt;*&lt; >?>
</pre>

<p>The first rule indicates that, when scanning forwards, a later
start-of-comment token is mismatched, but tagged as commented text rather than
as an error. When scanning backwards, an earlier end-of-comment token takes
precedence and the later one is tagged as an error.</p>

<h3>Example: reinterpretation</h3>

<p>In C or a similar language, the text <code>"*/"//"</code> would be
scanned as something like:</p>

<pre>"*/"//"
">-"#-"
</pre>

<p>After scanning, if there is no multiline comment in progress at the start of
the sequence, the first two quotes are matched, the one-line comment delimiter
is matched with the end of the line, and the tags are temporarily overridden
as:</p>

<pre>"*/"//"
==-=*-*
</pre>

<p>On the other hand, if a multiline comment is in progress, it ends at the
<code>*/</code> delimiter, the last two quotes are matched, and the phrase is
instead temporarily overridden as:</p>

<pre>"*/"//"
**-====
</pre>

<p>If bracket matching is incremental as well as scanning, then these
readjustments can also be incremental, and the whole process need not be very
expensive.</p>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>TODO: explain delimiters. Not same because (a) they are usually not nested
and (b) they may be limited to one line (c) open and close may be the same or
there may not be an explicit closer and (d) they affect the highlighting of the
tokens in between. Nested comments same as brackets, non-nested comments more
interesting. When inside a comment, an open comment delimiter is always the top
opener on the unmatched stack. Ordinary tokens are included in algorithm, and
have their highlighting overridden as you go past them, according to the top
opener, but they don't end up on either stack. Unnested algorithm described
below. Multiline literal (often """) similar, also unnested (can't nest if start
and end delimiter are the same). Describe quotes and forward and backward.
Describe one-line comment (memo). Must wait until found and then re-mark to end
of line - not purely local but not bad.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence <code>(()</code> can be treated in
either of these two ways:</p>

<pre class="match">(<b>(</b>)
<b>(</b>()
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using three dots to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(<b>(</b><u>...</u>)
<b>(</b><u>...</u>()
</pre>

<p>In the first case, there are two surplus brackets before the cursor and one
after, and the outermost two are matched. In the second case, there are no
surplus brackets after the cursor, so the leftmost bracket is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match"><i>/*...<b>/*</b>...*/</i>...<b>*/</b>
<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b></i><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b>...</i><u>:</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>:</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>:</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>:</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>:</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>:</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>

<h3>Notes</h3>

<p>Can bracket/delimiter matching be defined in a custom way too?</p>

<pre>Brackets, in increasing priority order
M () [] {} &lt;> (match, mismatch and excess ? Covers PU, MA, EX, LT, GT
S ~)? ~]? ~}? (start excess)
G {] {) [)
L (] (} [}
Quote delimiters (match with morph)
M ''=  ""=  @@=
M '.? ".?   (mismatch both, implicitly not NL)
One-line delimiters terminated at NL
Don't need GL rules because first=last
Since . ends ' and " and // backward matching needs retro morph
Comment delimiters
D #.*  /\*  (i.e. // ends at \n and /* ends at */)
G //?       (i.e. /* /* mismatch R)
X ^^
/* /* GT   but  {- {- = PU
</pre>

<pre>M = start of text
() = Rr   [] = Aa  {} = Ww
'"T = QDT  // = C  /**/ = Xx   {--} = Yy

// Make sure tags have no override flags when not on any of the stacks.
// (Note indent MAYBE grapheme continuation of preceding NL).
enum action {
    XX,  // Not relevant.
    PU,  // push next onto openers, then check it against closers
    MA,  // match with popped opener, push pair onto matched
    EX,  // excess: mark next as mismatched  (EQUALS G ???)
    LT,  // less: pop and mismatch opener, repeat
    GT,  // mismatch next (and push on matched ???)
    IN,  // incomplete (same as LT, but don't touch NL ???)
    SK,  // skip past ordinary token
    CO,  // skip, and override as commented
    QU,  // skip, and override as quoted
};

// Table which compares the most recent opener with the next token, to decide
// what action to take in forward matching. Use M (MISS) for start of text.
int table[COUNT][COUNT] = {
    // At start of text, no openers
    [M][R]=PU, [M][A]=PU, [M][W]=PU, [M][r]=EX, [M][a]=EX, [M][w]=EX,
    [M][Q]=PU, [M][D]=PU, [M][T]=PU, [M][C]=PU, [M][X]=PU, [M][x]=EX,
    [M][Y]=PU, [M][y]=EX, [M][N]=SK, [M][I]=SK,
    // (
    [R][R]=PU, [R][A]=PU, [R][W]=PU, [R][r]=MA, [R][a]=LT, [R][w]=LT,
    [R][Q]=PU, [R][D]=PU, [R][T]=PU, [R][C]=PU, [R][X]=PU, [R][x]=EX,
    [R][Y]=PU, [R][y]=EX, [R][N]=SK, [R][I]=SK,
    // [
    [A][R]=PU, [A][A]=PU, [A][W]=PU, [A][r]=GT, [A][a]=MA, [A][w]=LT,
    [A][Q]=PU, [A][D]=PU, [A][T]=PU, [A][C]=PU, [A][X]=PU, [A][x]=EX,
    [A][Y]=PU, [A][y]=EX, [A][N]=SK, [A][I]=SK,
    // {
    [W][R]=PU, [W][A]=PU, [W][W]=PU, [W][r]=GT, [W][a]=GT, [W][w]=MA,
    [W][Q]=PU, [W][D]=PU, [W][T]=PU, [W][C]=PU, [W][X]=PU, [W][x]=EX,
    [W][Y]=PU, [W][y]=EX, [W][N]=SK, [W][I]=SK,
    // '
    [Q][R]=QU, [Q][A]=QU, [Q][W]=QU, [Q][r]=QU, [Q][a]=QU, [Q][w]=QU,
    [Q][Q]=MA, [Q][D]=QU, [Q][T]=QU, [Q][C]=QU, [Q][X]=QU, [Q][x]=QU,
    [Q][Y]=QU, [Q][y]=QU, [Q][N]=IN, [Q][I]=QU,
    // "
    [D][R]=QU, [D][A]=QU, [D][W]=QU, [D][r]=QU, [D][a]=QU, [D][w]=QU,
    [D][Q]=QU, [D][D]=MA, [D][T]=QU, [D][C]=QU, [D][X]=QU, [D][x]=QU,
    [D][Y]=QU, [D][y]=QU, [D][N]=IN, [D][I]=QU,
    // """
    [T][R]=QU, [T][A]=QU, [T][W]=QU, [T][r]=QU, [T][a]=QU, [T][w]=QU,
    [T][Q]=QU, [T][D]=QU, [T][T]=MA, [T][C]=QU, [T][X]=QU, [T][x]=QU,
    [T][Y]=QU, [T][y]=QU, [T][N]=SK, [T][I]=QU,
    // //
    [C][R]=CO, [C][A]=CO, [C][W]=CO, [C][r]=CO, [C][a]=CO, [C][w]=CO,
    [C][Q]=CO, [C][D]=CO, [C][T]=CO, [C][C]=CO, [C][X]=CO, [C][x]=CO,
    [C][Y]=CO, [C][y]=CO, [C][N]=MA, [C][I]=CO,
    // /*
    [X][R]=CO, [X][A]=CO, [X][W]=CO, [X][r]=CO, [X][a]=CO, [X][w]=CO,
    [X][Q]=CO, [X][D]=CO, [X][T]=CO, [X][C]=CO, [X][X]=GT, [X][x]=MA,
    [X][Y]=CO, [X][y]=CO, [X][N]=SK, [X][I]=CO,
    // {-
    [Y][R]=CO, [Y][A]=CO, [Y][W]=CO, [Y][r]=CO, [Y][a]=CO, [Y][w]=CO,
    [Y][Q]=CO, [Y][D]=CO, [Y][T]=CO, [Y][C]=CO, [Y][X]=CO, [Y][x]=CO,
    [Y][Y]=PU, [Y][y]=MA, [Y][N]=SK, [Y][I]=CO,
};
</pre>

</body>
</html>
