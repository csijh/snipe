<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<!-- TODO C++, Java, Python, Haskell, HTML -->

<p><mark>Snipe</mark > has a scanner, which is implemented as a string-matching
state machine, with stack-based bracket matching. It divides a source text into
tokens, and gives each token a type. It:</p>

<ul>
<li>may be approximate compared to a compiler</li>
<li>partitions the whole text into tokens, whether valid or not</li>
<li>supports dynamic loading of language definitions</li>
<li>supports incremental rescanning</li>
<li>includes bracket matching</li>
<li>aids indenting, semicolon insertion, and comment reformatting</li>
</ul>

<p>Languages for programming editors are often expressed using regular
expressions. Languages for Snipe are instead expressed as state machine tables.
These are easier to read and maintain, and only a little less compact. In
addition, stack-based bracket matching is supported, which regular expressions
can't handle.</p>

<p>For example, the C language is described by the <code>c.txt</code> file in
the directory <code>snipe/languages</code>. The commands <code>make
compile</code> and <code>./compile c.txt</code> can be used to compile the
file. The compiler analyses the language definition to ensure that the scanner
can handle any source text, and that it can't get stuck in an infinite loop. It
then carries out tests which are included in the <code>c.txt</code> file and,
if they pass, produces a compact table in file <code>c.bin</code> for use by
Snipe's scanner.</p>

<h2>Rules</h2>

<p>A language description contains simple text (<u title="aka ASCII (obsolete
and non-international)">basic Latin</u> characters <code>' '</code> to
<code>'~'</code> plus <code>'\n'</code>). The rules in the file specify how
simple source text is divided into tokens. The scanner which uses the
description treats every Unicode character beyond basic Latin in the same
way as letters. That is sufficient to handle the common uses of Unicode in
identifiers, string literals and comments.</p>

<p>In a language description file, a line which is blank or begins with a
non-letter such as <code>#</code> or <code>/</code> is a comment line which is
ignored, or a line used for testing. Otherwise, a line represents a
string-matching rule.</p>

<p>A rule has a base state name, a list of patterns to match, and a target state
name, all separated by spaces. A state name is a lower case word, possibly
including digits. A pattern is any sequence of non-space characters. When the
scanner is in the base state of a rule and one of the patterns appears next in
the input, the scanner moves past the matched characters to include them in the
token currently being scanned, and goes into the target state. For
example:</p>

<pre>start " string
</pre>

<p>With this rule, if the scanner is in the <code>start</code> state and a
double quote character appears next in the input, the scanner moves past the
character and goes into the <code>string</code> state.</p>

<p>A rule may have a token type after the target state. A type is an upper case
word, and must be one of the ones described later. If a rule has a type, the
current token is ended, and given that type. For example:</p>

<pre>start == != start OP
</pre>

<p>With this rule, in the <code>start</code> state, if either of the equality
operators <code>==</code> or <code>!=</code> appears next in the input, then
the scanner moves past the operator, makes it a token with type
<code>OP</code>, and goes to the <code>start</code> state.</p>

<p>A pattern can consist of two dots with a character on either side:</p>

<pre>start 0..9 number
</pre>

<p>The pattern represents a range of one-character patterns, so the rule is
equivalent to:</p>

<pre>start 0 1 2 3 4 5 6 7 8 9 number
</pre>

<p>If the scanner is in the <code>start</code> state, and a digit appears next
in the input, the scanner matches the digit and goes into the
<code>number</code> state.</p>

<p>The pattern <code>!..~</code> can be used to match any character other than
space or newline.</p>

<p>A limited form of lookahead is provided. A pattern which starts with a
single backslash <code>\</code> is a lookahead pattern. It indicates a string
to be matched without being included in the current token. For example:</p>

<pre>id \( start FUNCTION
</pre>

<p>In the <code>id</code> state, which presumably recognizes identifier tokens,
if the next character in the source text is an open bracket, the current token
is given the type <code>FUNCTION</code> instead of <code>ID</code>. That allows
a function name to be highlighted differently when it appears as
<code>f()</code> say. (It is not possible, though, to look ahead past a space to
recognise <code>f ()</code> in the same way.) A lookahead pattern can also be a
range:</p>

<pre>dot \0..9 float
</pre>

<p>In the <code>dot</code> state, presumably just after recognizing a dot
character, if a digit appears next in the source text, the scanner goes to the
<code>float</code> state without moving past the digit.</p>

<p>A lookahead pattern <code>\s</code> matches a space and <code>\n</code>
matches a newline. To avoid confusion, single-letter lookahead patterns other
than <code>\s</code> or <code>\n</code> such as <code>\x</code> are treated as
errors. A literal single letter <code>x</code> can be recognized as a lookahead
using a range <code>\x..x</code>. For example:</p>

<pre>id \s \n start ID
</pre>

<p>Here, while scanning an identifier, if a space or newline is encountered next
in the input, the identifier is given type <code>ID</code> and the scanner goes
to the <code>start</code> state. Spaces and newlines cannot be included in
tokens, but are handled automatically. Matching a <code>\s</code> or
<code>\n</code> pattern has the side effect of marking the space or newline as
a separator and moving past it.</p>

<p>If a lookahead pattern matches when the current token is empty, and the rule
has a type, the type is ignored. For example:</p>

<pre>start \s \n start SIGN
</pre>

<p>A rule containing <code>\s</code> or <code>\n</code> should normally have a
type, to terminate any current token before a separator. However, if a rule like
<code>start</code> can only ever occur at the start of a token, no type is
needed, because it would always be ignored. For example, the above
<code>SIGN</code> type can be omitted:</p>

<pre>start \s \n start
</pre>

<p>A pattern beginning with two backslashes such as <code>\\u</code> is a
non-lookahead pattern matching a string such as <code>\u</code> starting with a
single backslash. A pattern beginning with three backslashes such as
<code>\\\u</code> is a lookahead for a string such as <code>\u</code> starting
with a single backslash. A backslash anywhere else in a pattern stands for
itself. A pattern <code>\</code> consisting of just a backslash is treated as
an abbreviation for a range, effectively equivalent to
<code>\n \s \!..~</code>, matching any character as a lookahead.</p>

<p>A type which represents a bracket may optionally have a digit from
<code>1</code> to <code>4</code> as a suffix. This indicates a stack operation,
and which variant of bracket is intended. An open bracket is pushed onto a
stack of unmatched open brackets, and a close bracket causes it to be popped
off again so that the two brackets can be matched. For example:</p>

<pre>start ( start LEFT3
</pre>

<p>When this rule is obeyed, the scanner pushes <code>LEFT3</code> onto the
stack, representing an open square bracket. A corresponding pop operation
is:</p>

<pre>start ) start RIGHT3
</pre>

<p>For this rule to be obeyed, as well as the close bracket being next in the
input, the top item on the stack must be <code>LEFT3</code>. If so, the stack
is popped, the close bracket is given the type <code>RIGHT3</code>, and the two
brackets are marked as matching. The default, if there is no other rule that
applies, is that the two brackets are marked as mismatching. The close bracket
is also marked as a mismatch if the stack is empty.</p>

<p>For a language such as HTML or XML which has named brackets, the digit
<code>0</code> can be used as a suffix to indicate that the text of the open
and close brackets should be compared. For example, to recognise
<code>&lt;html></code>, after treating the <code>&lt;</code> sign as a token,
this rule can be used:</p>

<pre>start html attributes LEFT0
</pre>

<p>Any attributes and the final <code>></code> sign are treated as separate
tokens. The matching <code>&lt;/html></code> can be handled with a
rule like this:</p>

<pre>start html spaces RIGHT0
</pre>

<p>Again, the <code>&lt;/</code> and <code>></code> are treated as separate
tokens so that the name alone is treated as a bracket. For this rule to apply,
<code>html</code> must be next in the input, the type <code>LEFT0</code> must be
at the top of the stack, and the open bracket must also have the name
<code>html</code>.</p>

<p>To ensure that there is always a non-empty token to carry the bracket
information, a bracket type with a digit suffix cannot be used with a lookahead
pattern.</p>

<h2>States</h2>

<p>A state is defined by the rules which have that state as their base state.
The base state of the first rule in a language description is the starting
state for the scanner when scanning of a source text begins. The rules defining
a state can be in any order and need not necessarily be contiguous. If the
input matches a pattern mentioned in any one of the rules for a state, that
rule is applied. For example:</p>

<pre>start == != start OP
start a..z A..Z id
</pre>

<p>In the <code>start</code> state, if an equality operator appears next in the
input, it is marked with type <code>OP</code> and the scanner remains in the
<code>start</code> state, whereas if a letter appears, the scanner goes into
the <code>id</code> state. If two different patterns, whether normal or
lookahead, match at one position in the input, the longer pattern takes
precedence:</p>

<pre>start = start SIGN
start == != start OP
</pre>

<p>In this example, if there are two equal signs next in the input, the second
rule applies, not the first. If there is only a single equal sign, the first
rule applies.</p>

<p>A state should not have two pattern strings which are the same,
even if one is a lookahead and the other is not. The only exception is when
there are two or more possible bracket types that can be popped:</p>

<pre>start } state1 END1
start } state2 RIGHT1
</pre>

<p>This might occur in a language where curly brackets are used both for blocks
and inline for structures. It is desirable to give them different types,
because they affect semicolon insertion in different ways. An open curly
bracket must have been pushed on the stack either as <code>BEGIN1</code> or as
<code>LEFT1</code>, in one of two different places in the language definition.
When a close curly bracket is matched in the <code>start</code> state, the
relevant one of the two rules shown matches, causing a jump to one of two
different states. If neither rule matches, the default is that the brackets are
marked as mismatched and the scanner stays in the <code>start</code>
state.</p>

<p>If a single character is matched directly by one pattern and as
part of a range in another pattern, the direct pattern takes precedence:</p>

<pre>string !..~ string
string " start QUOTE
</pre>

<p>Here, if a double quote <code>"</code> is next in the input, the second rule
is applied, even though <code>"</code> is included in the range in the first
rule. If a single character is matched by two ranges, and one is a subrange of
the other, the subrange takes precedence. For example:</p>

<pre>id a..z A..Z 0..9 id
id \ start ID
</pre>

<p>If a letter or digit appears next, the first rule applies, even though
letters and digits are included in the implicit range in the second rule. If
any other character appears, the second rule applies.</p>

<p>Any ambiguity not covered above between two patterns in the rules for a state
is an error. For example, overlapping ranges such as <code>0..5</code> and
<code>5..9</code> are incompatible.</p>

<p>When a language description is processed, various checks are made to ensure
that the scanner never fails, partitions the whole input into tokens and
separators, handles all possible inputs, and terminates without getting stuck
in a loop.</p>

<p>There is a check that every state handles all the single characters
<code>!..~ \s \n</code> in some way. Where a lookahead pattern other than
<code>\s</code> or <code>\n</code> in a rule with no type causes a jump between
states without making progress, there is a check that no infinite loop of jumps
can occur.</p>

<h2>Types</h2>

<p>These are the available token types, and their intended meanings:</p>

<pre>KEYWORD, TYPE, MARK,               - kinds of keyword
IDENTIFIER, FUNCTION, PROPERTY,    - kinds of identifier
VALUE, QUOTE, DOCUMENT,            - literals
BEGIN, END, LEFT, RIGHT,           - block and inline brackets
BEGIN0, ... RIGHT4,                - automatically matched brackets
NOTE, COMMENT,                     - one-line and multi-line comments
OPERATOR, UNARY, SIGN, JOIN,       - operators and punctuation
WRONG                              - illegal character
</pre>

<p>These can be shortened to any abbreviation, e.g. <code>KEY</code>,
<code>ID</code>, <code>OP</code>, and in fact even the first letter is
sufficient. A stack operation suffix <code>0</code> to <code>4</code> can be
applied only to the bracket types <code>BEGIN</code>, <code>END</code>,
<code>LEFT</code>, <code>RIGHT</code>.</p>

<p>The scanning conventions and the types are designed to help with syntax
highlighting, reformatting, bracket matching, indenting, semicolon insertion,
and incremental rescanning as follows.</p>

<p><b>Syntax highlighting:</b> Each token type can be displayed differently,
according to a style definition. Suffixes are ignored.</p>

<p><b>Reformatting:</b> The scanning conventions ensure that comments are
divided into word-like tokens, with spaces and newlines as separators. This
helps with reformatting comments, as well as with word-based cursor movement. A
multiline comment with <code>COMMENT</code> tokens is reformatted by changing
the line breaks so that the maximum number of tokens fit on each line without
exceeding the window width. However, a blank line or line beginning with at
least one space is not combined with the previous line. A sequence of one-line
comments with <code>NOTE</code> tokens is treated similarly, except that the
first token on each line is retained, and a line where the first token is not
followed by a space or is followed by two or more spaces is not combined with
the previous line.</p>

<p><b>Bracket matching:</b> A stack of open brackets is maintained by the
scanner, and manipulated by the push and pop conventions. If a pop succeeds,
the two brackets are matched. If it fails, the brackets are marked as
mismatched. This bracket matching can also be used to control the actions of
the state machine, so that relatively complex contexts can be detected.</p>

<p><b>Indenting:</b> Snipe has a very simple and uniform rule for fully
automatic indenting. The indent of a line is determined by the number of
unmatched open brackets in the source text. Lines belonging to multi-line
constructs, i.e. lines starting with a <code>COMMENT</code> or
<code>DOCUMENT</code> token, are not automatically indented, whereas lines
starting with a single-line equivalent, i.e. <code>NOTE</code> or
<code>QUOTE</code>, are.</p>

<p><b>Semicolon insertion:</b> Snipe inserts semicolons at the ends of lines
where appropriate, using a simple and uniform rule. A line should have a final
semicolon added unless it ends with a prefix token, or the following line
begins with a postfix token. A token is regarded as prefix if it expects an
immediately following token other than semicolon, as postfix if it expects an
immediately preceding token other than semicolon, as infix if it is both, and
as nonfix if it is neither.</p>

<p>Most token types are nonfix. The types <code>OP</code>, <code>SIGN</code> and
<code>JOIN</code> (line joiner such as backslash) are infix. A
<code>UNARY</code> operator (e.g. <code>++</code>) is regarded as nonfix, on
the assumption that a newline need never separate it from its operand. An
operator such as minus which can be either prefix or infix should be given type
<code>OP</code> and treated as infix, on the assumption that a prefix version
of the operator is never essential at the start of a line.</p>

<p>Brackets of type <code>LEFT</code> and <code>RIGHT</code> (with or without a
suffix digit) are treated as prefix and postfix respectively. A
<code>BEGIN</code> bracket is treated as infix rather than prefix, on the
assumption that it is the start of a block which is attached to the end of a
statement so shouldn't be preceded by a semicolon. An <code>END</code> bracket
is treated as prefix rather than postfix, on the assumption that a semicolon is
appropriate before it but not after it.</p>

<p>Languages in the C family often use curly brackets <code>{}</code> both as
block brackets and as inline brackets. In the latter case, a semicolon is
required after the close bracket. To cope with this, the language definition
can give the open bracket either the type, say, <code>BEGIN1</code> or
<code>LEFT1</code> according to context, and use bracket matching to ensure
that the matching close bracket is given type <code>END1</code> or
<code>RIGHT1</code> to match.</p>

<p><b>Incremental rescanning:</b> A line of source text can be rescanned
individually, using only a recorded start state for the line, and the relevant
stack of preceding unmatched open brackets. The stack can be maintained or
reconstructed as necessary.</p>

<p>When a newline is matched with a <code>\n</code> lookahead pattern, the
target state can be recorded as the starting state for the line following the
newline. The scanner can then rescan the line in isolation by starting in that
state. A scanning state can, in general, depend on characters beyond the
current scanning position, because of lookahead patterns. However, language
rules cannot look ahead past a newline, so the start state for a line depends
only on the previous lines.</p>

<p>The fact that lines can be rescanned individually makes it easy to interleave
rescanning with user actions, to avoid long pauses.</p>

<h2>Examples</h2>

<p>In many programming languages, an identifier is allowed to start with a
keyword. In that case, identifiers can be handled by rules like these:</p>

<pre>start  if else for while  key
start  a..z A..Z          id

key    a..z A..Z 0..9     id
key    \                  start KEY

id     a..z A..Z 0..9     id
id     \                  start ID
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. The scanner
goes to the <code>key</code> state which gives the token the type
<code>KEY</code>. Suppose instead that the identifier <code>form</code> appears
next in the input. The prefix <code>for</code> is matched and the scanner goes
into the <code>key</code> state. Then the <code>m</code> is matched, the
scanner goes into the <code>id</code> state, and the token ends up being given
the type <code>ID</code>.</p>

<p>Sometimes, judgement has to be used to decide how to handle operators, with
regard to semicolon insertion. In general, with an operator such as a minus
sign which can be infix or prefix, it is better to declare it as infix
(type <code>OP</code>). This means a semicolon is never expected before or after
it. If used at the start or end of a line, it indicates a continuation. The
only situation where this gives the wrong result is where a statement begins
with a minus sign, which is rare.</p>

<p>On the other hand, the times <code>*</code> operator in the C or C++
languages, which is also used as a prefix dereference operator, quite often
appears at the start of a statement:</p>

<pre>n = 0;
*p = 0
</pre>

<p>So in that case, it is better to give it type <code>UNARY</code>, i.e.
nonfix, on the basis that it is probably rarer for it to be used to continue a
statement across lines.</p>

<p>In some languages, block brackets can be used on their own to establish an
inner scope:</p>

<pre>{
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>In that case, a preceding semicolon is expected. It doesn't seem practical to
detect this situation without full parsing. The simplest approach would
seem to be to assume that a block is always attached to the end of a statement,
and to avoid this fairly rare situation by writing something of the form:</p>

<pre>if (true) {
    int temp = a;
    a = b;
    b = temp;
}
</pre>

<p>A language construct which contains spaces or newlines needs to be divided
into mini-tokens. For example, one-line comments, say starting with
<code>//</code> and continuing to the end of the line, can be handled with
rules of the form:</p>

<pre>start    //     note NOTE

note     !..~   note
note     \s     note NOTE
note     \n     start NOTE
</pre>

<p>A comment line then consists of a sequence of tokens of type
<code>NOTE</code>, separated by spaces. This is one of the few situations where
<code>\s</code> and <code>\n</code> need to be handled differently. Multi-line
comments, say starting with <code>/*</code> and ending with <code>*/</code> and
not nesting, can be handled by:</p>

<pre>start      /*         comment

comment    !..~       comment
comment    \s \n      comment COMMENT
comment    */         start COMMENT
</pre>

<p>Languages in the C family often use curly brackets both as block brackets and
as inline brackets. To give them different types, the contexts in which inline
brackets appear can be detected using bracket matching. For example, one
context in C where inline curly brackets are used is the right hand sign of an
assignment:</p>

<pre>= (...) { ... }
</pre>

<p>The round brackets can, in principle, contain an arbitrarily complex type
expression, with brackets of its own. By giving these round brackets different
types from the usual ones, the scanner can match them up and so detect the
opening inline curly bracket which follows. For example, the relevant rules might
be:</p>

<pre>start { start BEGIN1
start ( start LEFT1
start } start END1
start } start RIGHT2
start ) start RIGHT1
start ) eqtype RIGHT2
start = eq OP

eq ( start LEFT2

eqtype { LEFT2
</pre>

<p>The types <code>BEGIN1</code> and <code>END1</code> are being used for block
brackets, <code>BEGIN2</code> and <code>END2</code> for inline brackets,
<code>LEFT1</code> and <code>RIGHT1</code> for ordinary round brackets and
<code>LEFT2</code> and <code>RIGHT2</code> for round brackets immediately after
an equal sign.</p>

<p>After matching an equal sign, the <code>eq</code> state causes
<code>LEFT2</code> to be pushed on the bracket stack. The scanner then returns
to the <code>start</code> state to process the type expression. When the
<code>LEFT2</code> constant comes back to the top of the stack and the open
round bracket is matched, the scanner jumps to the <code>eqtype</code> state to
handle the following open curly bracket.</p>

<p>Some languages support template strings, with embedded substitution
expressions. for example:</p>

<pre>`a = ${a} and b = ${b}`
</pre>

<p>An expression between <code>${</code> and <code>}</code> can be arbitrarily
complicated, including its own curly brackets and template delimiters, so these
brackets need to be matched in order to detect the return to the parent
template. That can be done with rules of the form:</p>

<pre>start ` template
start } start RIGHT1
start } template RIGHT4

template   \${    template2 DOC
template   !..~   template
template   \s \n  template DOC
template   `      start DOC

template2  ${     start LEFT4
</pre>

<p>The <code>template</code> state treats all the parts of a template string up
to <code>${</code> as <code>DOC</code> tokens. The <code>template2</code> state
gives <code>${</code> the type <code>LEFT4</code>. The scanner then goes to the
start state to handle whatever is within the brackets. The <code>start</code>
state recognises the matching close curly bracket, and returns to the
<code>template</code> state.</p>

<p>In a language definition for a tag-based language like HTML, open and close
tags should be treated as brackets, in order to match them up. It is tempting
to write rules like this:</p>

<pre>start &lt;html> start LEFT0
start &lt;body> start LEFT0
start &lt;/html> start RIGHT0
start &lt;/body> start RIGHT0
</pre>

<p>This is not appropriate, for several reasons. First, HTML has a large number
of tag names. Although the state machine effectively switches on the first
character of patterns, it does a linear search through the patterns that start
with the same first character. That could lead to a noticeable inefficiency.
Second, the spelling of the open and close brackets should match, whereas in
these rules the open bracket starts with <code>&lt;</code> and the close
bracket with <code>&lt;/</code>. Third, the bracket name may be followed by
spaces or attributes. So it is better to use rules of this form:</p>

<pre>start &lt; open
start &lt;/ close

open html attributes LEFT0
open body attributes LEFT0

close html spaces RIGHT0
close body spaces RIGHT -B
</pre>

<h2>Tests</h2>

<p>A language description can contain tests, which also act as examples
illustrating the operation of the rules. A line starting with <code>></code>
represents a line of source text. An immediately following line starting with
<code>&lt;</code> represents the output from the scanner. For example:</p>

<pre>&gt; (count + 1)
&lt; LI---- O VR.
</pre>

<p>The output has the one-letter abbreviation for the type of each token, placed
under its first character. Characters of a token after the first are marked
with minus signs. A space is marked as a space, and a newline is marked as a
dot. The scanner state after scanning the input line is used as the start state
for the next test, which allows for extended examples.</p>

<p>Bracket matching results in bracket tokens being marked with lower case
letters if they are mismatched:</p>

<pre>&gt; (count + 1]
&lt; lI---- O Vr.
</pre>

<!--

<h3>Bracket Matching</h3>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence:</p>

<pre>(...(...)
</pre>

<p>can be treated in either of these two ways:</p>

<pre class="match">(...<b>(</b>...)
<b>(</b>...(...)
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using <code>|</code> to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(...<b>(</b>.<u>|</u>.)
<b>(</b>.<u>|</u>.(...)
</pre>

<p>In both cases, the surplus bracket closest to the cursor is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match">   <i>/*...<b>/*</b>...*/</i>...<b>*/</b>..<u>|</u>
<u>|</u>..<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b></i><u>|</u>..<i>/*...*/</i>...
<i><b>/*</b>...</i><u>|</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>|</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>|</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>|</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>|</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>|</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>
-->

</body>
</html>
