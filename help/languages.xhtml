<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Snipe Customisation</title>
</head>
<body>

<h1>Languages</h1>

<p><mark>Snipe</mark> has a scanner used to divide the text of a file being
edited into tokens, and to give each token a type. The scanner is table-driven,
using a language description from a text file. Further languages can be
supported by adding description files.</p>

<h2>Overview</h2>

<p>A scanner for an editor has different goals from those of a scanner in a
compiler. On the one hand the scanner:</p>

<ul>
<li>may omit some details needed only for full compiling</li>
<li>may accept some tokens that a compiler would reject</li>
<li>may split or classify tokens differently</li>
<li>may not need to be completely accurate</li>
</ul>

<p>One common reason for a scanner not to be completely accurate is where the
rules for a language have lexical rules that depend on the syntactic context,
e.g. the rules for distinguishing between <code>/</code> for division and
<code>/</code> as a regular expression delimiter in JavaScript. On the other
hand, the scanner:</p>

<ul>
<li>must include all characters, including comments, in
tokens</li>
<li>must be able to handle any text, whether valid or not, and never
fail</li>
<li>must produce token types which are suitable for syntax
highlighting</li>
</ul>

<p>In addition, the scanner for Snipe:</p>

<ul>
<li>avoids re-scanning large quantities of text</li>
<li>produces mini tokens within comments and literals</li>
<li>supports word-based cursor movement and line wrapping</li>
<li>helps with automatic indenting, bracket matching, semicolon insertion</li>
<li>supports incremental algorithms</li>
</ul>

<p>In most editors, when a multi-line comment delimiter such as <code>/*</code>
is typed, it causes a large quantity of text to be re-scanned as a single big
comment token, possibly to the end of the file. Then, when the matching close
comment delimiter is typed, much of the text is re-scanned again, reversing the
effect. This is inefficient, which could lead to noticeable delays, and also
causes large changes on screen, which can be disconcerting.</p>

<p>To avoid this, and support an incremental approach in which small edits have
small effects, the Snipe scanner divides the text into smaller tokens than
usual. These small tokens then support word-based cursor movement and line
wrapping within comments or literals. Bracket matching techniques which take the
current cursor position into account are used to match up comment and literal
delimiters, and override the highlighting of the tokens between them. Auto
indenting and other features are similarly handled in an incremental
fashion.</p>

<h2>Tokens</h2>

<p>Language tokens are described by a plain text file. For example, the C
language is described by the <code>tokens.txt</code> file in the directory
<code>snipe/languages/c</code>. The file is a description of a string-matching
state machine. A generic scanner uses the state machine to generate a tag byte
for every byte of text.</p>

<p>The format of language description files is fairly simple. A line which is
blank or begins with two symbol characters such as <code>//</code> is a comment
line which is ignored. Otherwise, a line represents a string matching rule, for
example:</p>

<pre>start == != start OP
</pre>

<p>A rule consists of a base state name, a list of pattern strings to match, a
target state name, and an optional tag. These are all separated by spaces. A
state name begins with a lower case letter. A pattern is an arbitrary string of
ASCII characters, excluding control characters or spaces or newlines. A tag
starts with an upper case letter or is a single symbol character. A tag often
represents a token type. The base state of the first rule in the description is
the initial state of the scanner.</p>

<p>When the scanner is in the base state of a rule and one of the strings in the
list is matched, the scanner moves past the matched string in the input, and
goes into the target state. If it is a <dfn>completion</dfn> rule, i.e. if the
tag represents a token type, the token is terminated after the matched
characters and given that type. If it is a <dfn>construction</dfn> rule, i.e. if
there is no tag, scanning of the current token is continued.</p>

<p>With the above rule, if the scanner is in the <code>start</code> state and
either of the equality operators <code>==</code> or <code>!=</code> appears
next, then the scanner moves past the operator, gives it the token type
<code>OP</code>, and remains in the <code>start</code> state.</p>

<p>A pattern string in a rule is plain ASCII text. There are no quoting
conventions. A pattern must be non-empty and may not contain spaces, newlines,
or control characters. Although non-ASCII characters cannot be explicitly
matched, they are accepted in the text being scanned, and are implicitly treated
the same as letters. This covers most common cases where such characters are
allowed by programming languages, in comments, strings or identifiers. Spaces
and newlines cannot be matched explicitly or included in tokens. but are matched
and tagged automatically by the scanner.</p>

<p>As an abbreviation, if a pattern string consists of two characters separated
by two dots, it represents a range of one-character strings, e.g.
<code>0..9</code> stands for <code>0 1 2 3 4 5 6 7 8 9</code>. For example:</p>

<pre>start 0..9 number
</pre>

<p>This rule says that if the scanner is in the <code>start</code> state, and a
digit appears next in the input, the scanner matches the digit and goes into the
<code>number</code> state. This is a construction rule, i.e. there is no tag, so
the current token is not terminated, and scanning of the token continues after
the matched digit.</p>

<p>A tag may be a token type which is a name starting with an upper case letter.
Any names can be used, but only the first letter is significant, and it is used
only to determine syntax highlighting. Typical names might be:</p>

<pre>FUNCTION ID KEY OP PROPERTY RESERVED SIGN TYPE VALUE
</pre>

<p>Alternatively, a tag may be a symbol consisting of a single printable but
non-alphanumeric ASCII character. The symbols and their meanings are:</p>

<pre>(   Open level 0 bracket
)   Close level 0 bracket
[   Open level 1 bracket
]   Close level 1 bracket
{   Open level 2 bracket
}   Close level 2 bracket
&lt;   Open level 3 bracket
>   Close level 3 bracket
#   Start of one-line comment, e.g. # or //
/   Start of multiline comment (non-nesting), e.g. /*
\   End of multiline comment (non-nesting), e.g. */
^   Start of multiline comment (nesting), e.g. {-
$   End of multiline comment (nesting), e.g. -}
*   Token inside (any kind of) comment
'   Single quote delimiter
"   Double quote delimiter
@   Multiline quote delimiter, e.g. """
=   Token inside (any kind of) quotes
:   Label indicator (affects indenting)
?   Invalid, incomplete, mismatched or unwise token
-   Continue the same token
</pre>

<p>Each symbol other than the last indicates a token type which has some further
significance, as well as syntax highlighting, e.g. for bracket or delimiter
matching or indenting. The minus sign symbol explicitly indicates that the
current token is to be continued, and is the default if a rule has no tag.</p>

<p>There are further symbols used internally and automatically by the scanner as
tags for spaces, newlines, and bytes which continue a UTF-8 character. Examples
of using symbols as tags are:</p>

<pre>escape \n start ?

filename > start =

start 0..9 number -
</pre>

<p>The <code>escape</code> state might be used to mark an escape sequence such
as <code>\n</code> as an error token, in case it is not inside quotes. If it is
inside quotes, then later delimiter matching will override the type as
<code>=</code> to indicate that it should be highlighted as quoted text. The
<code>filename</code> rule might be used to recognise the end of an inclusion
filename in the C language between angle quotes as a token, and give it the type
<code>=</code> to indicate that it should be highlighted as if it were a normal
quoted string. The third rule is an alternative way of saying that if a digit is
matched, the <code>number</code> state is used to scan the rest of the token,
using an explicit minus sign instead of having no tag.</p>

<p>There may be multiple rules for the same state. If a string mentioned in any
one of the rules matches, that rule is applied. For example:</p>

<pre>start == != start OP
start a..z A..Z id
</pre>

<p>In the <code>start</code> state, if an equality operator appears next in the
input, it is marked with type <code>OP</code>. If a letter appears, the scanner
moves to the <code>id</code> state.</p>

<p>If two different strings match at one position in the input, the longer
string takes precedence. For example:</p>

<pre>start = start SIGN
start == != start OP
</pre>

<p>If there are two equal signs next in the input, the second rule applies, not
the first. If there is only a single equal sign, the first rule applies.</p>

<p>If the same string is mentioned in multiple rules, the earlier rule takes
precedence. Thus later rules act as defaults. For example:</p>

<pre>filename > start =
filename !..~ filename
</pre>

<p>These rules say that, while recognizing a filename in <code>&lt;...></code>
brackets as a single token, a <code>></code> character terminates the token,
even though the <code>></code> character is also matched by the second rule.</p>

<p>A limited form of lookahead is provided. A <dfn>lookahead</dfn> rule has a
<code>~</code> character as a tag prefix. For example:</p>

<pre>id ( start ~FUNCTION
</pre>

<p>This rule says that, in state <code>id</code>, if an open bracket appears
next in the input text, the current token at this point is terminated and given
type <code>FUNCTION</code>, without including the bracket. The scanner then goes
to the <code>start</code> state to deal with the bracket. There may be spaces or
newlines between the current token and the bracket, so this is effectively a
lookahead to the next token.</p>

<p>A lookahead rule can be a construction rule rather than a completion rule,
with <code>-</code> as its tag, or no tag. For example:</p>

<pre>start \ escape ~
</pre>

<p>This says that in the <code>start</code> state, if a backslash occurs next in
the input, it is not immediately included in the current token. The target state
<code>escape</code> is responsible for handling the backslash.</p>

<p>A rule may have no patterns, in which case it is a <dfn>default</dfn> rule to
indicate what happens in any situation which has not yet been handled. For
example:</p>

<pre>id start ID
</pre>

<p>This can be thought of as matching the empty string. It can equally be
thought of as looking ahead for the empty string, so it is equivalent to:</p>

<pre>id start ~ID
</pre>

<p>Either version of the rule ensures that if an identifier is not followed by
anything handled in previous rules, it is given the type <code>ID</code>. The
rule applies to all single printable characters, as if a lookahead rule with the
explicit pattern <code>!..~</code> was given, but a default rule also applies to
spaces or newlines.</p>

<p>Since a token is not marked until the end of the token is reached, decisions
about which type to use can be delayed. For example, rules like these can be
used for a language where an identifier is allowed to start with a keyword:</p>

<pre>start a..z A..Z id
start if else for while key

key a..z A..Z 0..9 id
key start KEY

id a..z A..Z 0..9 id
id start ID
</pre>

<p>Suppose the keyword <code>for</code> appears next in the input. Since
<code>for</code> is longer than the single letter <code>f</code>, the second
rule for the <code>start</code> state applies rather than the first and the
scanner goes to the <code>key</code> state which gives the token the type
<code>KEY</code>.</p>

<p>Suppose instead that the identifier <code>form</code> appears next in the
input. The prefix <code>for</code> is matched and the scanner goes into the
<code>key</code> state. Then the <code>m</code> is matched and the scanner goes
into the <code>id</code> state and the token ends up being given type
<code>ID</code>.</p>

<p>If a default rule is also a construction rule, i.e. it has no tag (or a minus
sign tag), it is effectively an unconditional jump to another state. For
example:</p>

<pre>inclusion &lt; filename
inclusion start
</pre>

<p>These rules handle a filename in angle brackets in the special context of a
file inclusion. The first rule matches the open angle bracket and goes to the
<code>filename</code> state to match the rest of the filename. The default rule
says that if anything else appears next in the input, the scanner reverts to the
<code>start</code> state to handle it.</p>

<p>A lookahead or default rule which is a construction rule, i.e. has no tag (or
has a minus sign tag), makes no obvious immediate progress, so there is a check
that there is no cycle of such rules which could result in an infinite loop when
scanning.</p>

<p>Every state is either a <dfn>starting</dfn> state, which the scanner can be
in between tokens, or a <dfn>continuing</dfn> state, where there is a non-empty
current token. Checks are made to ensure that each state is treated consistently
as one or the other. The starting states are the initial state, and any state
which appears as a target in a completion rule. For example:</p>

<pre>start # hash KEY
</pre>

<p>This rule might be used in the C language, to recognise
<code>#include</code>. After the <code>#</code> token and optional spaces,
<code>include</code> is a keyword rather than an identifier. The
<code>hash</code> state is a starting state for recognising such keywords only
in this limited context. Another example is:</p>

<pre>html &lt;% java &lt;

java %> html >
</pre>

<p>These rules might be used in a language such as <code>JSP</code> where html
text can contain Java program fragments between <code>&lt;%</code> and
<code>%></code> brackets. The <code>html</code> and <code>java</code> states are
starting states which recognize each of the two sublanguages.</p>

<p>Inconsistency between starting and continuing states can cause an error
message. For example:</p>

<pre>dot 0..9 number
dot a..z A..Z prop ~SIGN

prop a..z A..Z 0..9 prop
prop start PROPERTY
</pre>

<p>The idea behind these rules is that if a dot is followed by an identifier,
the identifier should be highlighted differently, as a <code>PROPERTY</code>.
Since the <code>dot</code> state checks by lookahead for the first letter, it
seems harmless for the first <code>prop</code> rule to include digits. However,
these rules would cause an error message. That is because the <code>prop</code>
state is determined to be a starting state, because it follows the completion of
a <code>SIGN</code> token in the second <code>dot</code> rule. On the other
hand, it appears to be a continuing state, both because it is the target of its
first rule, a continuation rule, and because it completes a
<code>PROPERTY</code> token in its second rule. This can be corrected by
writing:</p>

<pre>dot 0..9 number
dot a..z A..Z prop ~SIGN

prop a..z A..Z prop2
prop start

prop2 a..z A..Z 0..9 prop2
prop2 start PROPERTY
</pre>

<p>Now, <code>prop</code> is a starting state which matches only the first
letter, and <code>prop2</code> is a continuing state which recognizes the rest
of the token.</p>

<p>A starting state can have an explicit default rule, but it can only be an
unconditional jump to another starting state. Without such an explicit default
rule, a starting state must handle every possible input character, for example
by having a last rule of the form:</p>

<pre>start !..~ start ?
</pre>

<p>This accepts any character not already dealt with as a one-character error
token. Spaces and newlines are handled similarly and automatically, by accepting
and tagging them suitably, though this can't be expressed explicitly.</p>

<p>Every continuing state must end with a default rule, to ensure that the
current token is completed and given a type, no matter what appears next in the
input. For example:</p>

<pre>id start ID
</pre>

<p>This apples to spaces and newlines as well as other characters, ensuring that
the current token gets type <code>ID</code> in all cases not already
handled.</p>

<p>In awkward cases, it may be necessary to choose an imperfect compromise. Take
a file inclusion string <code>&lt;stdio.h></code> in C for example. Technically,
the C language allows the filename string to contain spaces, but that would
involve awkward language-dependent handling during later delimiter matching,
since <code>&lt;</code> and <code>></code> are not uniformly treated as literal
quotes in the C language. To avoid that problem, the rules for the C language
could include these:</p>

<pre>filename &gt; start =
filename !..~ filename
filename start ~?
</pre>

<p>This treats <code>&lt;stdio.h&gt;</code> as a single token, without spaces,
of type <code>=</code> to indicate quoted text, or <code>?</code> to indicate an
incomplete token. A file path containing spaces in this context is vanishingly
rare, and the only consequence is incorrect syntax highlighting on one line, so
the imperfection seems acceptable.</p>

<p>A language description in <code>tokens.txt</code> can be compiled into a table
using <code>compile.c</code> in <code>snipe/languages</code> and then executed
using <code>interpret.c</code>, independently of the rest of Snipe. The
interpreter carries out tests in a file <code>tests.txt</code>. Each test
consists of optional comment lines starting with <code>#</code>, followed by a
line of text, followed by a line of tags generated by the scanner. For
example:</p>

<pre># Check brackets
struct *point = { x, (y+1) }; int ns = [(n+2),3];
K-----_SI----_S_{_IS_(ION)_}S_K--_I-_S_[(ION)SN]S.
</pre>

<p>Thus the type of a token may be affected by the next token, but no more than
that. To scan incrementally in the editor, when a token is altered, the editor
needs to go back at least as far as the beginning of the previous token before
the changed one, and find what state the scanner was in at that point, to start
re-scanning.</p>

<h3>Scanner operation</h3>

<p>The current state of the scanner can be recorded now and then, e.g. at the
start of each line of the text. Then, when some text changes while editing,
re-scanning of the changed text need begin no earlier than at the start of the
affected line. Re-scanning would then continue until synchronisation, i.e. until
the current state of the scanner at the start of a line matches the previous
state recorded at that point. It is desirable that this synchronisation should
happen after only a line or two, to avoid visual instability for the user as
well as inefficiency in the editor. Scanning is then effectively
incremental.</p>

<p>The first state to be defined in a language description is the default one
for the scanner to start in. It is normal for most tokens to be scanned starting
from that first state, with other states being defined to handle progression
through each token. In that case, re-scanning is sure to be brief. However,
alternative start states for tokens can be used to handle unusual
situations.</p>


<h2>Matching</h2>

<!-- Best approach for compactness: allocate 256 values 'dynamically' to both
"tag x overridden with tag y" pairs, and "scanner starting state x overridden
with space tag" and even "original indent x overridden with newline". Can we
work out from language definition whether we will run out? -->

<p>The way in which brackets and delimiters are matched for a language is
defined in a file <code>match.txt</code> in the language directory. A blank line
or a line starting with one or two symbols (e.g. <code>#</code> or
<code>//</code>) is a comment line. Each rule in the file consists of triples of
symbols, followed by a tag:</p>

<pre>(=) [=] {=} -
</pre>

<p>The first and third symbols in a triple are token type tags, as allocated in
the <code>tokens.txt</code> file. The first is an opener, i.e. the token type of
an opening bracket or delimiter, and the third is a closer. The middle symbol is
an operator such as a comparison which specifies what happens when the opener
and closer meet during matching. The <code>=</code> symbol indicates that the
opener and closer match. A rule with a minus sign as a tag (or no tag) specifies
that the openers and closers are brackets, and the token types of the tokens
between matching brackets remain unchanged. A rule may also deal with
mismatches:</p>

<pre>(&lt;] [&lt;} ?
</pre>

<p>This establishes a precedence between the brackets when they don't match, and
the token type given to any mismatched brackets. The triple <code>(&lt;]</code>
means that when <code>(</code> is the most recent open bracket and
<code>]</code> is the next close bracket, then the <code>(</code> is marked with
type <code>?</code> and subsequently ignored. Implicit further comparisons are
automatically deduced from the ones given, in this case:</p>

<pre>(&lt;} [>) {>) {>] ?
</pre>

<p>A suitable rules for quotes would be:</p>

<pre>'=' "=" =
</pre>

<p>This establishes which quotes match, and specifies that the type
<code>=</code> (quoted text) overrides the original types of the quotes and the
tokens between them. A further rule might be:</p>

<pre>'~. "~. ?
</pre>

<p>This rule specifies that the quotes are on one line. The dot is the token
type of a newline, and <code>'~.</code> means that the opening quote and the
newline 'match'. Using <code>~</code> instead of <code>=</code> means that there
is no change to the types of the tokens in between. The opening quote has its
type overridden with <code>?</code> to indicate an incomplete construct.</p>

<p>Comments might be specified using:</p>

<pre>#=. &lt;=> *
</pre>

<p>This says that a one-line comment, where the opening delimiter has been
tagged with type <code>#</code>, is matched by the next newline and that all the
tokens making up the comment have their types overridden with <code>*</code>
(commented text). Assuming that multi-line comment delimiters have been given
types <code>&lt;</code> and <code>></code>, the triple <code>&lt;=></code> makes
them match.</p>

<p>In some languages multi-line comments nest, but in many others they don't. To
specify that multi-line comments nest, a rule like this can be used:</p>

<pre>&lt;+&lt; >+>
</pre>

<p>The operator <code>+</code> goes between two openers or two closers to
indicate that one pair of  is allowed inside another. In the forward matching
algorithm, the triple <code>&lt;+&lt;</code> indicates that when
<code>&lt;</code> is on the stack of unmatched openers, and a further
<code>&lt;</code> is encountered, it is pushed onto the stack. To specify
instead that multi-line comments are non-nesting, rules like this can be
used:</p>

<pre> &lt;>&lt; *
>>> ?
</pre>

<p>The first rule indicates that, when scanning forwards, a later
start-of-comment token is mismatched, but tagged as commented text rather than
as an error. When scanning backwards, an earlier end-of-comment token takes
precedence and the later one is tagged as an error.</p>

<h3>Example: reinterpretation</h3>

<p>In C or a similar language, the text <code>"*/"//"</code> would be
scanned as something like:</p>

<pre>" QUOTE */ COMMENT " QUOTE // COMMENT " QUOTE
</pre>

<p>After scanning, if there is no multiline comment in progress at the start of
the sequence, the first two quotes are matched, the one-line comment delimiter
is matched with the end of the line, and the sequence is temporarily adjusted
to:</p>

<pre>" QUOTE */ QUOTE " QUOTE // COMMENT " COMMENT
</pre>

<p>On the other hand, if a multiline comment is in progress, it ends at the
<code>*/</code> delimiter, the last two quotes are matched, and the phrase is
instead temporarily adjusted to:</p>

<pre>" COMMENT */ COMMENT " QUOTE // QUOTE " QUOTE
</pre>

<p>If bracket matching is incremental as well as scanning, then these
readjustments can also be incremental, and the whole process need not be very
expensive.</p>

<p>TODO: explain forward algorithm. Assume only brackets. As well as text, there
are two stacks: unmatched and matched. (Picture with ... for cursor position.)
The unmatched stack contains indexes of currently unmatched open brackets (as
standard). The matched stack contains matched (open,close) pairs of indexes. The
indexes of the close brackets are in text order. Changes as you add or remove a
bracket at the cursor are very small and incremental and efficient.  Two
mismatched brackets are treated as matched, except that they are both
highlighted as invalid. Incremental.</p>

<p>TODO: explain backward algorithm. Entirely symmetrical. Note that the indexes
are measured leftwards from the end of the text, so that they remain stable as
insertions and deletions happen at the cursor.</p>

<p>TODO: explain inwards algorithm. The two stacks are compared inwards.
Mismatching pairs are highlighted red. Remaining surplus brackets are
highlighted red. Give examples showing 'just typed' effects.</p>

<p>TODO: explain delimiters. Not same because (a) they are usually not nested
and (b) they may be limited to one line (c) open and close may be the same or
there may not be an explicit closer and (d) they affect the highlighting of the
tokens in between. Nested comments same as brackets, non-nested comments more
interesting. When inside a comment, an open comment delimiter is always the top
opener on the unmatched stack. Ordinary tokens are included in algorithm, and
have their highlighting overridden as you go past them, according to the top
opener, but they don't end up on either stack. Unnested algorithm described
below. Multiline literal (often """) similar, also unnested (can't nest if start
and end delimiter are the same). Describe quotes and forward and backward.
Describe one-line comment (memo). Must wait until found and then re-mark to end
of line - not purely local but not bad.</p>

<p>After scanning into tokens, a matching algorithm is used to pair up brackets
and delimiters. Some aims of the Snipe approach are to:</p>

<ul>
<li>highlight unmatched brackets and delimiters</li>
<li>have small edits produce small changes</li>
<li>make the algorithm incremental</li>
</ul>

<p>If brackets don't match, there is an ambiguity about which brackets to mark
as unmatched. For example, the sequence <code>(()</code> can be treated in
either of these two ways:</p>

<pre class="match">(<b>(</b>)
<b>(</b>()
</pre>

<p>In the first case, the outer brackets are matched and the inner one is
highlighted as unmatched. In the second case, the rightmost brackets are
matched, and the leftmost one is marked as unmatched.</p>

<p>If the user has just typed one of the two open brackets, that is the one that
is most intuitively highlighted as unmatched. That suggests a matching algorithm
based on the user's history. However, that would make it awkward to save and
reopen files, and it could easily become counter-intuitive.</p>

<p>Instead, Snipe uses a matching strategy which is based purely on the text
together with the user's current cursor position. Brackets are matched forwards
from the start of the text up to the cursor, and backwards from the end of the
text to the cursor. Surplus brackets on either side of the cursor are then
matched up from outermost to innermost. Using three dots to mark the cursor
position, the three brackets above are handled like this:</p>

<style>
pre.match { color: black; }
pre.match i { color:black; font-style: normal; background-color: lightgrey; }
pre.match b { color: red; }
pre.match u { color: green; text-decoration: none; }
</style>

<pre class="match">(<b>(</b><u>...</u>)
<b>(</b><u>...</u>()
</pre>

<p>In the first case, there are two surplus brackets before the cursor and one
after, and the outermost two are matched. In the second case, there are no
surplus brackets after the cursor, so the leftmost bracket is mismatched.</p>

<p>The situation is complicated by multiline comments. Let's suppose that they
are delimited by <code>/*</code> and <code>*/</code> and that these don't nest,
as in many C-like languages. These comments cause two main problems. One is that
commenting out goes wrong when there is an inner comment. The other is that
inserting or deleting a comment delimiter can cause a large amount of text to be
re-scanned, which is sometimes inefficient enough to cause a noticeable and
irritating delay. In any case, it causes a large amount of changed highlighting
on screen, which can be annoying.</p>

<p>The approach in Snipe, to avoid these problems, is to treat <code>/*</code>
as illegal inside comments (as <code>*/</code> already is) and, as with
brackets, use both forward and backward matching. In addition, the effect of an
unmatched comment delimiter only extends as far as the cursor. For example:</p>

<pre class="match"><i>/*...<b>/*</b>...*/</i>...<b>*/</b>
<b>/*</b>...<i>/*...<b>*/</b>...*/</i>
</pre>

<p>In the first case, the cursor is beyond the text fragment. The first and
third delimiters are matched, and the text between is highlighted as a comment.
The second and fourth delimiters are highlighted as unmatched. This is as
expected, except for the highlighting of the second delimiter.</p>

<p>In the second case, the cursor is before the text fragment. Working
backwards, the fourth and second delimiters are matched, with the text between
them highlighted as a comment, leaving the third and first delimiters unmatched.
Although this highlighting doesn't agree with the language conventions, it is a
reasonable approach once internal delimiters are regarded as invalid, and the
need for correction is clearly indicated.</p>

<p>To see the full effect on highlighting, here is a sequence of user actions in
which an attempt is made to comment out some text which already contains a
comment:</p>

<pre class="match"><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b></i><u>:</u>...<i>/*...*/</i>...
<i><b>/*</b>...</i><u>:</u><i>/*...*/</i>...
<i>/*...<b>/*</b></i><u>:</u><i>...*/</i>...
<i>/*...<b>/*</b>...</i><u>:</u><i>*/</i>...
<i>/*...<b>/*</b>...</i><i>*/</i><u>:</u>...
<i>/*...<b>/*</b>...</i><i>*/</i>...<u>:</u>
<i>/*...<b>/*</b>...</i><i>*/</i>...<b>*/</b><u>:</u>
</pre>

<p>At the first step, an opening delimiter is typed. At the second, the cursor
is moved past some text, which becomes highlighted as comment. Then the cursor
is moved past the second opening delimiter, which becomes highlighted as
unmatched. The first and third delimiters match, as surplus delimiters either
side of the cursor. Then the cursor is moved past some text which is unchanged,
and a final delimiter is typed, which is immediately highlighted as
unmatched.</p>

<p>During the sequence, the only changes on the screen are immediately adjacent
to the cursor, with possibly one change of highlighting to a delimiter further
away. And the changes are, arguably, very intuitive.</p>

<h3>Notes</h3>

<p>Can bracket/delimiter matching be defined in a custom way too?</p>

<pre>Brackets, in increasing priority order
M () [] {} &lt;> (match, mismatch and excess ? Covers PU, MA, EX, LT, GT
S ~)? ~]? ~}? (start excess)
G {] {) [)
L (] (} [}
Quote delimiters (match with morph)
M ''=  ""=  @@=
M '.? ".?   (mismatch both, implicitly not NL)
One-line delimiters terminated at NL
Don't need GL rules because first=last
Since . ends ' and " and // backward matching needs retro morph
Comment delimiters
D #.*  /\*  (i.e. // ends at \n and /* ends at */)
G //?       (i.e. /* /* mismatch R)
X ^^
/* /* GT   but  {- {- = PU
</pre>

<pre>M = start of text
() = Rr   [] = Aa  {} = Ww
'"T = QDT  // = C  /**/ = Xx   {--} = Yy

// Make sure tags have no override flags when not on any of the stacks.
// (Note indent MAYBE grapheme continuation of preceding NL).
enum action {
    XX,  // Not relevant.
    PU,  // push next onto openers, then check it against closers
    MA,  // match with popped opener, push pair onto matched
    EX,  // excess: mark next as mismatched  (EQUALS G ???)
    LT,  // less: pop and mismatch opener, repeat
    GT,  // mismatch next (and push on matched ???)
    IN,  // incomplete (same as LT, but don't touch NL ???)
    SK,  // skip past ordinary token
    CO,  // skip, and override as commented
    QU,  // skip, and override as quoted
};

// Table which compares the most recent opener with the next token, to decide
// what action to take in forward matching. Use M (MISS) for start of text.
int table[COUNT][COUNT] = {
    // At start of text, no openers
    [M][R]=PU, [M][A]=PU, [M][W]=PU, [M][r]=EX, [M][a]=EX, [M][w]=EX,
    [M][Q]=PU, [M][D]=PU, [M][T]=PU, [M][C]=PU, [M][X]=PU, [M][x]=EX,
    [M][Y]=PU, [M][y]=EX, [M][N]=SK, [M][I]=SK,
    // (
    [R][R]=PU, [R][A]=PU, [R][W]=PU, [R][r]=MA, [R][a]=LT, [R][w]=LT,
    [R][Q]=PU, [R][D]=PU, [R][T]=PU, [R][C]=PU, [R][X]=PU, [R][x]=EX,
    [R][Y]=PU, [R][y]=EX, [R][N]=SK, [R][I]=SK,
    // [
    [A][R]=PU, [A][A]=PU, [A][W]=PU, [A][r]=GT, [A][a]=MA, [A][w]=LT,
    [A][Q]=PU, [A][D]=PU, [A][T]=PU, [A][C]=PU, [A][X]=PU, [A][x]=EX,
    [A][Y]=PU, [A][y]=EX, [A][N]=SK, [A][I]=SK,
    // {
    [W][R]=PU, [W][A]=PU, [W][W]=PU, [W][r]=GT, [W][a]=GT, [W][w]=MA,
    [W][Q]=PU, [W][D]=PU, [W][T]=PU, [W][C]=PU, [W][X]=PU, [W][x]=EX,
    [W][Y]=PU, [W][y]=EX, [W][N]=SK, [W][I]=SK,
    // '
    [Q][R]=QU, [Q][A]=QU, [Q][W]=QU, [Q][r]=QU, [Q][a]=QU, [Q][w]=QU,
    [Q][Q]=MA, [Q][D]=QU, [Q][T]=QU, [Q][C]=QU, [Q][X]=QU, [Q][x]=QU,
    [Q][Y]=QU, [Q][y]=QU, [Q][N]=IN, [Q][I]=QU,
    // "
    [D][R]=QU, [D][A]=QU, [D][W]=QU, [D][r]=QU, [D][a]=QU, [D][w]=QU,
    [D][Q]=QU, [D][D]=MA, [D][T]=QU, [D][C]=QU, [D][X]=QU, [D][x]=QU,
    [D][Y]=QU, [D][y]=QU, [D][N]=IN, [D][I]=QU,
    // """
    [T][R]=QU, [T][A]=QU, [T][W]=QU, [T][r]=QU, [T][a]=QU, [T][w]=QU,
    [T][Q]=QU, [T][D]=QU, [T][T]=MA, [T][C]=QU, [T][X]=QU, [T][x]=QU,
    [T][Y]=QU, [T][y]=QU, [T][N]=SK, [T][I]=QU,
    // //
    [C][R]=CO, [C][A]=CO, [C][W]=CO, [C][r]=CO, [C][a]=CO, [C][w]=CO,
    [C][Q]=CO, [C][D]=CO, [C][T]=CO, [C][C]=CO, [C][X]=CO, [C][x]=CO,
    [C][Y]=CO, [C][y]=CO, [C][N]=MA, [C][I]=CO,
    // /*
    [X][R]=CO, [X][A]=CO, [X][W]=CO, [X][r]=CO, [X][a]=CO, [X][w]=CO,
    [X][Q]=CO, [X][D]=CO, [X][T]=CO, [X][C]=CO, [X][X]=GT, [X][x]=MA,
    [X][Y]=CO, [X][y]=CO, [X][N]=SK, [X][I]=CO,
    // {-
    [Y][R]=CO, [Y][A]=CO, [Y][W]=CO, [Y][r]=CO, [Y][a]=CO, [Y][w]=CO,
    [Y][Q]=CO, [Y][D]=CO, [Y][T]=CO, [Y][C]=CO, [Y][X]=CO, [Y][x]=CO,
    [Y][Y]=PU, [Y][y]=MA, [Y][N]=SK, [Y][I]=CO,
};
</pre>

</body>
</html>
