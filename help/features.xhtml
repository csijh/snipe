<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
body { font-size: 120%; }
pre, .indent { margin-left: 40px; }
img { display: block; margin: 0 auto; }
mark {
    font-family: cursive;
    font-size: 95%;
    color: #080;
    background-color: white;
}
</style>
<title>Snipe Features</title>
</head>
<body>

<h1>Features</h1>

<p>The basic actions corresponding to keyboard and mouse gestures can be gleaned
from the file <a href="../files/map.txt">files/map.txt</a>, which can be
customised. There are also some general settings in the file
<a href="../settings.txt">settings.txt</a>.</p>

<h2>Help</h2>

<p>Typing CTRL+H makes a help page appear in the browser. The command to do
that varies by platform. Unfortunately, this is not always reliable,
so it may need to be customized in the settings file. Alternatively,
double click on <code>help/index.xhtml</code> or load it with the browser.</p>

<h2>File menu</h2>

<p>Typing <code>CTRL_O</code> (Open) brings up the file menu. The mouse or arrow
keys can be used to choose a file or directory, including <code>../</code> to
move up to the directory above. Typing <code>Enter</code> opens the chosen
file or directory.</p>

<p>At present, there is no way to create a new file. Create a blank file with
e.g. <code>touch filename</code> and then open it in the editor. Double
clicking and other features will be added later.</p>

<h2>Scrolling</h2>

<p>Scrolling a page at a time is supported using <code>PageUp/PageDown</code>,
or <code>Fn_Up/Fn_Down</code> on a Mac laptop. Scrolling with a
mouse wheel or touchpad gesture is also supported. Scrolling is smoothly
animated, and always ends at a line boundary. Scrolling by grabbing a bar
with the mouse is not yet supported.</p>

<h2>Bracket matching</h2>

<p>Round, square and curly brackets <code>()[]{}</code> on each line are
matched, and mismatched brackets are syntax-coloured as errors, e.g. in red.
Care is taken
over the way in which brackets are matched, because it affects
auto-indenting. However, bracket matching is currently only done on each
line separately, not between lines.</p>

<p>Only syntactically meaningful brackets are matched, not brackets
inside comments or strings. To avoid ambiguities, the brackets form a hierarchy
with <code>()</code> as the most local and <code>{}</code> as the most global.
For example, with both <code>(}</code> and <code>{)</code> it is the round
bracket that is reported as mismatched.</p>

<p>Brackets which are unmatched rather than mismatched
are not marked as errors. Instead, they affect indenting.</p>

<h2>Auto-indenting</h2>

<p>Most editors provide something that ought to be called semi-auto-indenting,
where typing a newline adds an automatic indent.
It works well when typing new program text. But it typically works badly when
changing existing text. The result is that, for most programmers, there is
little or no net gain.</p>

<p><mark>Snipe</mark> provides full auto-indenting (currently just for .c and
.h files). The idea is that, in exchange for a small
and hopefully painless loss of control over indenting, the user need never think
about or adjust indenting ever again. The amount of indent on a line is
determined by simple rules, as explained below, and maintained during all
editing operations. <!-- The cursor can't be placed inside the indent - it
moves back and forth past the indent as if it wasn't there.-->  An attempt made
to change the indent fails, because it is immediately corrected.</p>

<p>It is challenging to come up with rules which are simple to understand and
implement, which are immediately apparent to the eye, which work across a wide
range of languages, which work even when a program is not in a syntactically
correct state, which cope with continuations of single statements onto multiple
lines as well as blocks of statements, which support all the common indenting
styles, and which the majority of programmers can learn to accept comfortably
without irritation.</p>

<p>The rules chosen are adapted from Python, and should work across all
curly-bracket-based languages, and possibly many more.
An <dfn>indenter</dfn> is an unmatched open bracket on a line, and an
<dfn>outdenter</dfn> is similarly an unmatched close bracket. Each indenter
causes the indent to be increased, starting on the following line. An outdenter
causes the indent to be decreased, starting on the following line, or on the
same line if it starts with an outdenter.</p>

<p>At present, only curly brackets affect
indenting. Treatment of round and square brackets will be added to
support continuation lines, but this will require bracket matching between lines
as well as within lines to be aesthetically acceptable.</p>

<p>Comment lines currently follow the same indenting rules, as well as
ordinary code. The indent of a blank line is temporarily zero. The indent of
a label line such as a case in a switch statement is temorarily reduced by
half an indent.
This feature
currently supports the two most popular
<a href="https://en.wikipedia.org/wiki/Indentation_style">indenting styles</a>,
K&amp;R and Allman, and to a lesser extent, some other styles such as Horstmann
and Pico.</p>

<p>This feature is experimental, and currently a bit rough. For example, at
present, the
cursor is allowed to be within the indent, though any attempt to increase or
decrease it is immediately corrected. A line can only be joined to the
previous one using backspace if the cursor is at the start of the line.
In future, a newline and the following indent will be treated as a single unit,
for movement and deletion.</p>

<h2>Line endings</h2>

<p>Files are always written out using <code>\n</code> line endings. The
Windows convention <code>\r\n</code> and old Mac convention <code>\r</code> are
accepted and converted on input. This follows the advice of the <a
href="http://utf8everywhere.org/">UTF-8 everywhere manifesto</a> which
recommends using <code>\n</code> line endings everywhere. All sensible tools on
Windows accept <code>\n</code> line endings. The most obvious exception is
Notepad, but there are other good reasons to avoid using that.</p>

<h2>No buffer</h2>

<p><mark>Snipe</mark> creates the illusion of editing a file directly, not a
copy in a buffer. This gets rid of an unnecessary extra complication in the
user's mental model, and removes the need for frequent saving, which is entirely
routine and therefore should be automated. Autosave becomes a necessary feature
of <mark>Snipe</mark> rather than an option.
Autosaving is done frequently and, in particular,
when the window loses the input focus. So, when moving from the editor to a
terminal window to type commands, the file should be saved by the time a
command is issued.</p>

<p><mark>Snipe</mark> doesn't create
backups of files, on the basis that programmers use other tools such as
<code>git</code> for that.</p>

<h2>Final newline</h2>

<p>Files are always written out with a final newline. A file without a
final newline has one added when it is read in. That's because: (a) most tools
expect a final newline and all tools tolerate it (b) some standards require it
and (c) the opposite convention, treating <code>\n</code> as a separator, is not
sensible because there is no way to represent an empty file as opposed to a file
with a single blank line.</p>

<p>The final newline convention is also maintained during editing, in line with
having no notional buffer. The more usual convention of treating a buffer as a
string with newlines as separators causes a surprising amount of confusion,
e.g. because the editor's line count for the buffer doesn't match the normal
line
count for the file. In <mark>Snipe</mark>, it is still reasonable to regard the
text as a single array of characters. The last cursor position is after the
final newline, which is naturally below the last line on the screen. However,
that apparent 'extra' line isn't given a line number or included in the line
count.</p>

<h2>Trailing blank lines and spaces</h2>

<p>A text file shouldn't have trailing blank lines, or trailing spaces on the
end of a line. It is planned to make <mark>Snipe</mark> remove such extras when
the cursor moves away from them.</p>

<h2>File separators</h2>

<p>Paths use forward slash <code>/</code> separators. Backslashes <code>\</code>
are converted to forward slashes in any paths that come from outside the editor.
The Windows libraries have always accepted forward slashes - it is only tools
that prefer backslashes. The editor refuses to handle file or directory names
that have slashes or backslashes in them, to encourage programmers to use
only platform independent names.</p>

<h2>Soft tabs</h2>

<p>Only soft tabs are supported. When files are read in, hard tabs are converted
to spaces. Other control characters are also rejected, except for newlines.</p>

<p>Hard tabs are obsolete, ambiguous, and cause all sorts of trouble. Some
tools, including printer drivers, don't handle them properly, some accept them
but with no option to specify their width, and the only common default of 8
spaces is commonly regarded as too wide for normal programs. Some public source
files use an indent width of four and a hard tab width of eight, leading to a
mixture of tabs and spaces. Such files are unreadable in any editor which
doesn't have separate settings for indent width and tab width. In any sensible
editor, soft tabs are implemented to behave just like hard tabs, so soft tabs
have no significant disadvantages. The current indent width is currently fixed
at four spaces.</p>

<p>For Makefiles, which require hard tabs, the tabs are convert to (currently
single) spaces, and converted back to tabs on saving.</p>

</body>
</html>
