<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB" xml:lang="en-GB">
<head>
<meta charset="UTF-8"/>
<style>
    body { font-size: 120%; }
    pre, .indent { margin-left: 40px; }
    img { display: block; margin: 0 auto; }
    mark {
      font-family: cursive;
      font-size: 95%;
      color: #080;
      background-color: white;
    }
</style>
<title>Building Snipe</title>
</head>
<body>

<h1>Building <mark>Snipe</mark> from source</h1>

<p>Binary releases are provided for each of the three main platform families.
They should work for most users. Binary distribution is the simplest approach,
avoiding the creation of multiple platform-specific installers or the inclusion
of the editor in a wide range of software repositories. For other platforms, or
unusual variations, <mark>Snipe</mark> has to be compiled from source.</p>

<p>If the binary release for your platform doesn't work for you, this is
almost certainly because there is something awkward about your computer which
may be difficult to track down, so the instructions here are far from
foolproof.</p>

<p>One possibility is that OpenGL is not installed on your
computer. It is possible that you may be able to install it and then use the
binary release. Otherwise try the instructions below for the closest platform
family. If necessary, check the background information further on.</p>

<h2>All platforms</h2>

<p>Download the Snipe source code using the source zip file in the latest
release. Change to the <code>src</code> directory and read the
<code>Makefile</code>.</p>

<p>Any module can be compiled and tested individually, e.g. the
<code>file</code> module can be tested with <code>make file</code>. This will
compile the module into an executable program <code>snipe</code> (or
<code>snipe.exe</code> on Windows), and then run it to execute the module's
unit tests.</p>

<p>The command <code>make snipe</code> will build the whole editor,
which can be run with <code>./snipe</code> or it can be copied to the directory
above and run with <code>../snipe</code> to move it out of the way of
subsequent unit tests.</p>

<p>The modules most likely to cause difficulties, and which should probably be
tested separately before building the whole editor, are <code>font</code>,
<code>handler</code> and <code>display</code>.</p>

<p>The command <code>make font</code> causes the <code>freetype</code> library
to be built. Since the cut down source of the freetype library provided
has no dependencies, this is quite likely to work. If it doesn't,
investigate <code>freetype</code>'s own make system.</p>

<p>The command <code>make handler</code> causes the <code>glfw</code> library
to be built from the sources provided. This first uses <code>cmake</code> to
configure <code>glfw</code> for your computer, then <code>make</code> to
compile the result. Finally the compiler arranges to dynamically link the
resulting program with a collection of system libraries (to do with keyboard,
mouse and window handling).</p>

<p>The command <code>make display</code> causes the OpenGL library to be
linked, as well as <code>glfw</code>. As long as OpenGL is available on
your computer, this is likely to work. If not, it is possible that further
system libraries are needed.</p>

<p>Although there is a typical list of system libraries to link with in the
Makefile (in the <code>SYS</code> variable), the list does differ between
computers, and this is the most likely problem area. A suggested way to
investigate this is to install <code>glfw3</code> temporarily, then
use the command <code>pkg-config --static --libs glfw3</code> to find out
what libraries are required for the statically linked version of
<code>glfw</code>. Libraries can be copied into the Makefile and, if
that works, they can be deleted one by one to see which ones are actually
necessary. Beware that the list is unlikely to be exactly correct, so
don't just copy it blindly. Beware that <code>glfw3</code> should be
uninstalled after the experiment, otherwise the compiler may try to link with
the installed version instead of the version supplied with the
<mark>Snipe</mark> sources.</p>

<h2>Linux</h2>

<p>First make sure <code>git</code>, <code>make</code> and <code>cmake</code>
are installed, or install them with commands such as <code>sudo apt install
git</code> or equivalent.</p>

<p>Check that the command
<code>uname -s</code> produces text containing <code>Linux</code> or
change the
Makefile so that it recognizes whatever is produced. Change
<code>gcc</code> in the <code>Makefile</code> to <code>clang</code> if it
helps (e.g. if your <code>gcc</code> is old and difficult to upgrade, so
that installing <code>clang</code> is a better option).</p>

<p>To investigate the system libraries needed, install <code>glfw3</code>
temporarily with a command such as <code>sudo apt install glfw3</code> (or
<code>libglfw3</code> or <code>libglfw3-dev</code>) and then type
<code>pkg-config --static --libs glfw3</code>, then uninstall.</p>

<h2>MacOS</h2>

<p>Find the terminal app, in applications/utilities.
Then install <code>homebrew</code> from its web site. This
has three good effects. Installing it causes the command line tools associated
with XCode to be installed (that's <code>gcc</code>, <code>git</code>,
<code>make</code> and so on, but not the IDE, which is not recommended for
cross-platform programmers anyway). It provides the command <code>brew</code>
which acts as a package manager to install further software. And it provides
the command <code>brew doctor</code> which checks consistency of installed
software, and suggests fixes if it finds problems.</p>

<p>Install <code>cmake</code> with <code>brew install cmake</code>.
The <code>gcc</code> command is probably a synonym for the Mac version of
<code>clang</code> (try <code>gcc -v</code>). Check that the command
<code>uname -s</code> produces something containing <code>Darwin</code> or
change the Makefile so that it recognizes whatever is produced.</p>

<p>If missing libraries or frameworks are preventing compilation, then
install <code>glfw3</code> temporarily with <code>brew install glfw3</code>
then type <code>pkg-config --static --libs glfw3</code>, then uninstall.</p>

<h2>Windows</h2>

<p>The Windows C compiler MSVC (included with Visual Studio) is unsuitable
for cross-platform use, because it focusses on C++ and doesn't support C11,
or C99, or the "hosted" part of C90 (i.e. the libraries). Cygwin is unsuitable,
because it depends on a large extra DLL, and the X11-based graphics is very
clunky and unreliable.</p>

<p>Instead, MSYS2 is recommended, which is built on <code>mingw-w64</code>,
adding a shell window and the <code>pacman</code> package manager. Install
MSYS2 from its web site. When setting up MSYS2, take care to
install <code>mingw-w64-x86_64-gcc</code> rather than the default version of
<code>gcc</code>, to support native compiling and avoid the need for a
Cygwin-like DLL. Similarly, install <code>mingw64/mingw-w64-x86_64-cmake</code>
rather than the default <code>cmake</code>, and so on for any tools you
need.</p>

<p>The list of system libraries is short, and unlikely to cause difficulties.
If there is a problem, it is difficult to give advice on tracking it
down. It may help to install <code>pkg-config</code> and <code>glfw3</code>
using <code>pacman</code>, and see whether the list of libraries produced by
<code>pkg-config --static --libs glfw3</code> helps, then uninstall.</p>

<h2>Background</h2>

<p>The main implementation goals are for <mark>Snipe</mark> to:</p>

<ul>
<li>be cross-platform</li>
<li>be fast-loading</li>
<li>have a single code base</li>
<li>provide portable binaries</li>
</ul>

<p>A variety of libraries have been tried (in several programming languages) to
achieve cross-platform graphics. Higher level libraries are unsatisfactory,
because they are typically very large, with extensive dependencies. That means
programs using them are only fast-loading on their native platforms, and then
only if the libraries have already been loaded into memory by other
applications. In the end, low level C libraries have been chosen:</p>

<ul>
<li><a href="https://www.freetype.org/">Freetype</a> for fonts</li>
<li><a href="http://www.glfw.org/">GLFW</a> for event handling and window control</li>
<li><a href="https://www.opengl.org/">OpenGL</a> for graphics rendering</li>
</ul>

<p>OpenGL is reliably available across most platforms, without users having to
install it. The most likely problems are with very old or very new computers.
Perhaps the biggest
threat is that OpenGL has become deprecated on new Macs. Eventually OpenGL
won't be supported directly any more. The open source upgrade to OpenGL is
Vulkan, but it is not generally pre-installed yet, so that users would have to
find and install a Vulkan driver. It is, however, starting to be supported by
GLFW and there is an open source tool to run it on newer Macs. Alternatively,
Metal (Macs only) or something like MoltenGL (not free) could be used.</p>

<p>Some general information about building OpenGL/GLFW programs for the three
main platforms can be gleaned from sites like <a
href="http://web.eecs.umich.edu/~sugih/courses/eecs487/glfw-howto/">this
how-to</a>.</p>

<h3>Portability</h3>

<p>To produce reasonably portable binaries for each of the three main platform
families, Freetype and GLFW are statically linked. The sources of Freetype and
GLFW are included with the <mark>Snipe</mark> project. Freetype is cut down to
a minimum,
supporting only <code>.ttf</code> font files, so that it becomes small and has
no further dependencies. OpenGL (which is effectively a device driver and
therefore not portable, even within the same platform family), and the standard
system libraries needed by GLFW (similarly not portable), are dynamically
linked.</p>

<p>The only reasonable programming languages to use in the implementation, given
this choice of low level libraries, are C or C++. C has been chosen as, used
with care, it is simpler. There are no real practical advantages of C++, given
that no specific C++ libraries are needed.</p>

<h3>Design and development</h3>

<p><mark>Snipe</mark> is implemented using small and well-encapsulated modules,
with low dependencies and no dependency cycles, each including its own unit
testing. The main dependency issue is how the logic of a program (the model) and
the graphics (the view) are related. The style chosen for <mark>Snipe</mark> is
to divide all the modules into four main groups:</p>

<img src="MVC.png" />

<p>The controller asks for events from the view, sends them as actions to the
model, then asks the model for data to send to the view to update it. This is a
variant of the Model-View-Controller design pattern, with lower dependencies
than usual. Usually, the model and view are described as depending on each
other, but dependency cycles like that make development unreasonably difficult.
Alternatively, the model is said to depend on the view, but that makes
everything depend on graphics, so that unit testing is unreasonably difficult.
And sometimes the view is said to depend on the model, especially in high level
graphics libraries, but that often leads to an over-complex view where it is
difficult to unplug one graphics library and plug in a different one.</p>

<p>The detailed list of modules and their dependencies is recorded in only one
definitive place, the <a href="Makefile">Makefile</a>. The modules are listed
there in dependency order, with each depending only on the modules above so
that, in any development step, the modules can be upgraded and tested one by one
in the order listed.</p>

<p>On each platform, the binary produced should work across a reasonable range
of computers.</p>

<!--
<p>To create a single Linux binary which covers a reasonable range of Linux
platforms, dependencies on system libraries (checked with <code>ldd</code>) are
kept low. In addition, as described <a
href="http://insanecoding.blogspot.com/2012/07/creating-portable-linux-binaries.html">here</a>,
<code>objdump</code> is used to find problematic GLIBC library functions which
normally require recent versions of the GLIBC library. Using a method similar to
<a href="https://github.com/wheybags/glibc_version_header">this</a>, those
problem functions are declared as older versions, making the binary compatible
with more platforms. This requires the <code>asm</code> feature of
<code>gcc</code> but avoids the need for a special build environment.</p>
-->

<h3>Style of C</h3>

<p>To meet the C11 standard uniformly across platforms, especially Windows,
the <code>long</code> type is avoided, and library functions are used with care.
Also <code>setbuf(stdout,NULL)</code> is included in every
<code>main</code>, in case <code>stdout</code> is not recognized as interactive
and so gets treated as buffered (which happens on MSYS2). Some Posix functions
beyond the C11 standard are required to handle directories properly
(<code>sys/stat.h</code>), to sleep (<code>time.h</code>), and to handle
threads (<code>pthread.h</code>) but fortunately all the recommended platform
environments provide what is needed. The preprocessor variable
<code>_POSIX_C_SOURCE 200809L</code> is defined before including Posix headers,
to satisfy a standard-conforming C compiler that extended Posix functions are
allowed.</p>

<p>To make modules independent, and their dependencies clear, each module has
its own header file which defines its API. None of the module headers mention
anything related to the OpenGL or GLFW APIs, isolating the use of those
libraries to the modules that need them. (Isolating libraries in this way in C++
can be surprisingly difficult, e.g. involving the PIMPL strategy.)</p>

<p>In order to make modules robust, most are encapsulated by
defining an opaque structure in the header:</p>

<pre>struct X;
typedef struct X X;
</pre>

<p>This ensures that normal code cannot see inside or damage the structure, and
can only access it by making official function calls.</p>

<p>It is normal to guard against multiple inclusion of headers using
preprocessor guards. But that is aesthetically ugly, and the care taken over
dependencies makes multiple inclusion problems rare. Function prototypes, opaque
structure declarations and (since C11) typedefs are safe to include multiple
times, so enumerated types are effectively the only problem.</p>

<p>Enumerated types in C are not type-safe. It is possible to use typesafe
opaque constants, but they are tedious to define and awkward to use and, in
particular, they can't be used in switch statements. So conventional C
enumerated types are used.</p>

<p>The convention used is that an enumerated type such as <code>event</code> is
defined in its own module, so that no other type appears in the module header
<code>event.h</code>, only function prototypes. The header contains:</p>

<pre>enum event { ... };
typedef int event;
...
</pre>

<p>Note that a declaration <code>typedef enum event event</code> would be
possible, <strong>but</strong> (a) it gives a false sense of type safety,
(b) it requires the enumeration to be in scope, and (c) it prevents the use of
<code>-1</code> as an exceptional value (e.g. the compiler's optimizer may
replace <code>e&lt;0</code> by <code>true</code>).</p>

<p>The header <code>event.h</code> is included only in implementation
<code>.c</code> files, not in other header files. If the <code>event</code>
type is needed in another header in order to define an API, that header uses
the line:</p>

<pre>typedef int event;
</pre>

<p>instead of the line:</p>

<pre>#include "event.h"
</pre>

<p>With these conventions, headers cause no multiple inclusion problems.</p>

<h3>Threads</h3>

<p>On many operating systems, during long user gestures such as dragging a
window by its title bar, or resizing a window, or (most irritatingly) scrolling
with a touchpad on a laptop, a program appears to freeze. This is because the
program is executing a long-lasting loop within the operating system.</p>

<p>During the loop, although the program itself is not executing normal program
code, there are progress callbacks from the system representing changes in
position or size or scroll amount. One way to prevent freezing is to redraw the
current state of the screen during each callback. This works, if a single
redraw is all that is required. However, it may not fit in with a clean design,
because the 'low level' callback may need to call 'high level' functions to
update the state and redraw. Also, the redrawing work must happen entirely
within the callback, so if the callback triggers an animation which is supposed to
continue after the callback returns, the animation won't run during the long
user gesture. You might think that a cross-platform event library like GLFW
would insulate the programmer from such things, but it doesn't.</p>

<p>In <mark>Snipe</mark>, it is desirable to use animation to achieve smooth
scrolling, and there are other problems with long user gestures. The only
general way to solve these problems is with threads. <mark>Snipe</mark> uses
POSIX threads rather than the threads defined as standard within C11, because
the latter are not yet easily available on Windows.</p>

<p>There needs to be a <em>handler</em> thread to manage system events, and a
<em>runner</em> thread to run the main body of the program. The runner thread
can keep animations going while the handler thread is locked up in an operating
system loop. It simplifies the design of timer events a little to add a third
<em>ticker</em> thread for regular timer events. This generates events every
half-second for cursor blinking and every minute for auto-saving.</p>

<p>Animation events, once per frame, can't be generated by the handler thread
(because they would get delayed), and they can't easily be generated by the
ticker thread (because the frame delay is associated with the
<code>glfwSwapBuffers</code> function). So the runner thread needs to push
animation frame events onto the queue.</p>

<p>The threads communicate via an event queue. All the threads push events
onto the queue, and the runner thread pulls them off. The queue needs to use a
lock (mutex) to make sure only one thread can access it at once, and
condition variables for threads to wait on until the queue is ready.</p>

<p>The operating system only communicates events to a program's
<em>main</em> thread, the one that is initially executing in the
<code>main</code> function, so that needs to be used as the handler thread,
while separate runner and ticker threads are started up. In fact, according to
the GLFW thread safety documentation and OpenGL information, tasks have to be
allocated like this:</p>

<ul>
<li><strong>handler:</strong> must be the main thread, initializes and
terminates GLFW and OpenGL, handles events, creates and destroys the window,
handles window events such as resize, creates and releases the OpenGL
context</li>
<li><strong>ticker:</strong> generates regular timer events</li>
<li><strong>runner:</strong>runs the bulk of the program, takes over the openGL
context, displays graphics, generates animation frame events</li>
</ul>

<p>Some awkwardnesses arise from this. For example, resizing the window might
be needed wile drawing graphics, but it can't be done on the runner thread
with the other graphics. It has to be done on the handler thread. Moreover,
the window can't be redrawn immediately a resize is requested, but only after
a window resize callback from the system confirms that it has been done. So
for a resize, the runner requests the handler to do the resize, and the handler
later issues an event to tell the runner to redraw.</p>

<p>After all this, the runner thread has a very simple design. It is a pure
event loop which processes each event in turn. Animation can be turned on to
generate frame events, or turned off so that the runner spends most of its time
idle. Incidentally, it should be possible to design a simple cross-platform
graphics library of the SDL variety along similar lines to hide all this
complexity from the programmer.</p>

</body>
</html>
